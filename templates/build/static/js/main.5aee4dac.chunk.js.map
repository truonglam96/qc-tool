{"version":3,"sources":["views/Components/ToolTip.jsx","views/Components/SwitchButton.jsx","views/contextCreateBoot.js","views/utility.js","views/Components/Action.jsx","views/Components/ScenarioTest.jsx","views/CreateBoot.jsx","views/Components/BootChoosing.jsx","views/SerialDisplay.jsx","views/Components/Qctool.jsx","views/Components/TestingResult.jsx","views/Components/ManualTest.jsx","views/MainApp.jsx","views/Test/Modal.jsx","views/AutomaticTest.jsx","views/QctoolFactory.jsx","views/TestMQTTProtocol.jsx","App.jsx","index.js"],"names":["ToolTip","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","toolTipMs","_this2","react_default","a","createElement","className","style","onMouseEnter","setState","onMouseLeave","React","Component","SwitchButton","renderNameButton","mdbreact_esm","color","outline","pinState","onClick","ScenarioTestFactoryContext","createContext","scenarioTests","AppContext","SocketIoContext","uuidv4Obj","hasBeenAllocated","_uuidv4","replace","c","r","Math","random","toString","create","uuid","indexOf","push","uuidv4","Action","componentWillUpdate","componentWillMount","store","showModal","pinSettings","pinName","pinNum","key","actions","onMouseIn","minusButtonOnMouseDown","toolTip","commandSetting","commands","commandInput","expect","timeoutError","logDebugs","logDebugInput","invalidInputTimeoutError","delayAction","delayTime","inputError","chooseFirmwareForBurning","firmwareVersions","firmwareChoosed","objectSpread","context","scenarioTestId","actionId","actionSynchronousState","renderChooseFirmwareForburningButton","margin","map","firmwareVersion","toggleModal","closeModalHandle","mousePositionGpioSettingButtonHandle","mouseEnter","pinSetting","indexPinSetting","renderInputCommandGroup","Fragment","label","onChange","e","target","value","commandInputEmpty","command","timeLength","id","splice","renderDelayActions","isNaN","renderSettedGpioActions","undefined","action","on","Components_ToolTip","backgroundColor","width","renderGpioButtonSettingGroup","Components_SwitchButton","indexPin","lastIndexAction","length","renderGpioActions","bind","assertThisInitialized","logInputEmpty","mouseEnterActionButton","console","log","Axios","get","then","data","_this3","type","size","isOpen","toggle","logDebug","deleteAction","contextType","ScenarioTest","typeAction","gpio","eraseFirmware","burnFirmware","delay","name","numLoop","createActionButton","createAction","scenarioTestSynchronousState","mouseEnterCreateActionButtonHandle","renderActions","Components_Action","renderCreateActionButton","chooseActionTypes","keys","index","inputNumLoopError","scenarioTestStoreName","scenarioTestStoreNumloop","deleteScenarioTest","ScenarioTestFactory","appendNewScenarioTest","scenarioTestsGlobal","toConsumableArray","setStoreScenarioTestsToGlobal","idAction","scenarioTestStore","idScenarioTest","actionStore","renderSaveButton","saveButton","openForm","placeholder","marginRight","marginLeft","valueInput","inputNameBoot","inputDescription","axios","post","bootName","description","response","catch","err","renderScenarioTests","scenarioTest","Components_ScenarioTest","Provider","bootSocket","socketIoContext","marginTop","BootChoosing","getBootInfo","dataBoots","bootInfos","d","_id","mouseEnterChoosingItemHandle","item","idItem","renderItems","info","JSON","parse","choosedBootHandle","concat","res","disabled","basic","setCreateBootView","SerialDisplay","renderSerialCommandInput","TextField","marginBottom","serialCommandInput","onKeyDown","emit","fullWidth","autoScrollingCheckBox","FormControlLabel","control","Checkbox","checked","isAutoScroll","serialData","senddingSerialCommandFail","textLog","createRef","nextProp","nextState","removeListener","current","scrollTop","scrollHeight","display","ref","class","renderSerialData","Qctool","runAction","runAutomationTest","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setHardwareInBusy","testingName","stop","renderInforQc","flexDirection","boxInfos","renderBootChoosingBt","Components_BootChoosing","hardwareInBusy","renderRunautomaticTestBt","renderBurnFirmwareButton","statusBurningFirmware","storedFirmwareVersions","renderEraseFirmwarePartiionButton","renderEraseFirmwareButton","sendkeyBt","renderStatusSerialPort","connectToDeviceStatus","port","renderPrintLabelBt","efuse","macAddress","imgsInFlash","brokenImageCount","batteryLevel","isWifiConnected","rssi","statusDevice","firmwareVersionStored","off","setTimeout","dummy","actionBeginRunningKey","actionDoneRunning","setConnectToDeviceStatus","status","addNotification","detailResult","stringify","testingResult","pushNewTestingResult","md","fluid","views_SerialDisplay","TesingResult","renderLogDebugsSearchedResult","logDebugsSearchedResult","pass","p","error","renderTestingResultTable","results","result","renderAllResult","testingResults","toogleShowDetailTestingResult","showDetail","ManualTest","isError","toogleShowTestManual","showTestManual","TabContainer","Typography","component","padding","children","MainApp","handleChange","event","title","message","duration","notificationDOMRef","insert","container","animationIn","animationOut","dismiss","parseInt","dismissable","click","nameBoot","choosedBoot","testingResultSend","elementNoExisted","vale","openCreateBootView","testingResultIndex","editBoot","classes","AppBar","position","Tabs","textColor","variant","scrollButtons","Tab","react_notifications_component_default","Components_Qctool","sm","CreateBoot","Components_ManualTest","TestingResult","withStyles","theme","root","flexGrow","palette","background","paper","makeStyles","boxShadow","shadows","spacing","rand","round","getModalStyle","top","left","transform","useStyles","wrapper","Toolbar","justifyContent","alignItems","cirlcularProcess","efuseConfig","alignContent","startAllTestingButton","timeTest","devicesFailNum","testingDeviceCards","paddingRight","card","contentsInCard","detailContentCard","detailContentCardFull","attributeTestingDeviceTitle","attributeTestingDeviceValue","detailInfoModal","justifyItems","serialDataInModal","height","overflowY","closeModalButton","AutomaticTest","bootSocketContext","useContext","TESTING_STATUS","_useState","useState","_useState2","slicedToArray","testingDevices","setTestingDevices","_useState3","model","productionVersion","productionLine","_useState4","setEfuseConfig","_useState5","_useState6","openModal","setOpenModal","_useState7","_useState8","onTestingProcessRunning","setOnTestingProcessRunning","_useState9","scenarioTestingRunning","_useState10","inCheckingDetailDevice","setIncheckingDetailDevice","_useState11","_useState12","setTestingTimer","_useState13","_useState14","_useState15","_useState16","setTimeTestingRunning","_React$useState","_useState17","useEffect","ms","setInterval","timeTestingRunning","testingTimer","clearInterval","inTestingDevice","find","device","testingStatus","renderEfuseConfig","renderNavBar","Button","CircularProgress","renderContentCard","content","thisBackgroundColor","LinearProgress","Paper","renderDeviceCard","renderDetailInfoModal","Modal","open","onClose","renderBody","CssBaseline","styleCardTittle","QctoolFactory","renderBoxInfos","infoName","align","extractedData","renderEfuseInBox","renderAutomaticTestingResult","automaticTestingResult","date","testingTime","scenarioTestResults","isAutomaticTestingPass","renderManualTestingResult","manualTestingResult","dayTest","renderAutomaticTesting","automationTest","test","inTesting","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","i","isTestingDone","t","return","renderDevicesList","icon","devicesTestingStack","devicePort","renderInTestingDeviceStatus","inTestingDeviceStatus","deviceBroken","serialPort","renderChooseModeTestingButton","nav","caret","chooseModeTestingButton","manualTest","hardwareBusy","theBoot","productAssemblyTest","waitingForSetRetestResult","finally","renderManualTesting","floor","restTestingTime","testerAnswerConfirmQuestion","currentQuest","answer","confirmQuestions","confirmQuestion","question","renderConfirmQuestions","q","questionType","src","imgUrl","alt","renderEfuseSetup","efuseSetup","production_line","version_code","renderLogDebug","renderRunningActions","setBeginTest","sms","automaticTesting","testAtSerialPort","queryDataCommand","findLogContainSubString","extractStringRegexQueries","testedDevicesNum","failtNum","nameDeviceFail","shouldPreventTestManual","reason","jsonData","trim","scenaroTest","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","scenarioTestResult","scenarioTestName","phaseTesting","alert","indexManualTestingAction","manualTestingAction","appBar","widh","fontFamily","fontSize","lineWeigth","fontWeight","textAlign","authenticateSetting","authenticateSettingButtonsGroup","endpointSetting","publishToTopicSetting","publishToTopic","publishToTopicTextField","subcribeToTopicSetting","subscribeToTopic","subscribedDataTextField","header","fontStyle","lineHeight","normalButtonStyle","normalIcon","TestMQTTProtocol","isAuthenticated","document","body","Grid","direction","xs","SentimentVerySatisfied_default","SentimentVeryDissatisfied_default","TextareaAutosize","rows","paddingLeft","App","storeSerialData","setBackupSerialData","componentDidMount","connectSocket","io","connect","backupSerialData","BrowserRouter","Route","path","exact","createBrowserHistory","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.5aee4dac.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nclass ToolTip extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        toolTipMs: null\n      };\n    }\n  \n    render() {\n      return (\n        <div\n          className=\"p-2\"\n          style={this.props.style}\n          onMouseEnter={() => {\n            this.setState({\n              toolTipMs: this.props.toolTipMs + \"ms\"\n            });\n          }}\n          onMouseLeave={() => {\n            this.setState({\n              toolTipMs: null\n            });\n          }}\n        >\n          {this.state.toolTipMs}\n        </div>\n      );\n    }\n  }\n\n  export default ToolTip\n  ","import React from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport {\n    MDBBtn\n  } from \"mdbreact\";\n\nclass SwitchButton extends React.Component {\n\n    renderNameButton = state => {\n      if (state) {\n        return <i className=\"fas fa-toggle-on\">ON</i>;\n      } else {\n        return <i className=\"fas fa-toggle-off\">OFF</i>;\n      }\n    };\n  \n    render() {\n      return (\n        <MDBBtn\n          color=\"mdb-color\"\n          outline={!this.props.pinState}\n          onClick={() => {\n            if (this.props.onClick != null) {\n              // send pinSetting State to parent\n              this.props.onClick();\n            }\n          }}\n        >\n          {this.renderNameButton(this.props.pinState)}\n        </MDBBtn>\n      );\n    }\n  }\n\n  export default SwitchButton","import React from \"react\";\n\nvar ScenarioTestFactoryContext = React.createContext({\n    scenarioTests: []\n});\n\nvar AppContext = React.createContext({\n});\n\nvar SocketIoContext = React.createContext({\n}); \n\nexport { \n    ScenarioTestFactoryContext,\n    AppContext,\n    SocketIoContext\n}\n","var uuidv4Obj = {\n  hasBeenAllocated: [],\n  \n  _uuidv4: function() {\n      return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n          var r = (Math.random() * 16) | 0,\n          v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      });\n  },\n\n  create: function () {\n      while (true) {\n          var uuid = this._uuidv4()\n\n          if (this.hasBeenAllocated.indexOf(uuid) < 0) {\n              this.hasBeenAllocated.push(uuid)\n              // console.log(\"this.hasBeenAllocated: \", this.hasBeenAllocated)\n              break\n          }\n      }\n      \n      return uuid\n  }\n}\n\nvar uuidv4 = function() {\n    return uuidv4Obj.create.call(uuidv4Obj)\n}\nexport default uuidv4","import React, { useDebugValue } from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport {\n  MDBContainer,\n  MDBBtn,\n  MDBModal,\n  MDBModalBody,\n  MDBModalFooter,\n  MDBInput,\n  MDBCol,\n  MDBRow,\n  MDBProgress,\n  MDBBtnGroup,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem\n} from \"mdbreact\";\n\nimport ToolTip from \"./ToolTip\"\nimport SwitchButton from \"./SwitchButton\"\n\nimport {ScenarioTestFactoryContext} from \"../contextCreateBoot\";\n\nimport uuidv4 from \"../utility\"\nimport Axios from \"axios\";\n\nclass Action extends React.Component {\n  static contextType = ScenarioTestFactoryContext\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      commandInputEmpty: false,\n      logInputEmpty: false,\n      commandInput: \"\",\n      mouseEnterActionButton: false\n    };\n  }\n\n  componentWillUpdate = ()=>{\n  };\n\n  componentWillMount = ()=>{\n    this.store =  {\n      showModal: false,\n\n      pinSettings: [\n        {\n          pinName: \"userButton\",\n          pinNum: 21,\n          key: uuidv4(),\n          actions: [],\n          pinState: false,\n          onMouseIn: false,\n          minusButtonOnMouseDown: false,\n          toolTip: null\n        },\n        {\n          pinName: \"antiCheatButton\",\n          key: uuidv4(),\n          pinNum: 12,\n          actions: [],\n          pinState: false,\n          onMouseIn: false,\n          minusButtonOnMouseDown: false,\n          toolTip: null\n        },\n        {\n          pinName: \"resetPin\",\n          key: uuidv4(),\n          pinNum: 20,\n          actions: [],\n          pinState: false,\n          onMouseIn: false,\n          minusButtonOnMouseDown: false,\n          toolTip: null\n        },\n        {\n          pinName: \"hallSensorPin\",\n          key: uuidv4(),\n          pinNum: 16,\n          actions: [],\n          pinState: false,\n          onMouseIn: false,\n          minusButtonOnMouseDown: false,\n          toolTip: null\n        }\n      ],\n      commandSetting: {\n        commands: [],\n        commandInput: \"\",\n        key: uuidv4()\n      },\n\n      expect: {\n        timeoutError: 0,\n        logDebugs: [],\n        logDebugInput: '',\n        invalidInputTimeoutError: ''\n      },\n\n      delayAction: {\n        key: uuidv4(),\n        delayTime: null,\n        inputError: false\n      },\n\n      chooseFirmwareForBurning: {\n        key: uuidv4(),\n        firmwareVersions: [],\n        firmwareChoosed: []\n      }\n\n    };\n    this.store = {...this.store, ...this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId]}\n    this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n  }\n\n  componentDidMount() {\n    console.log(\"action componentDidMount\")\n    Axios.get('/api/getStoredFirmwareVersions').then(r=>{\n      this.store.chooseFirmwareForBurning.firmwareVersions = r.data.firmwareVersions\n      this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n    })\n  }\n\n  renderChooseFirmwareForburningButton = () => {\n    return (\n      <MDBRow style={{ margin: \"20px\" }} key={this.store.chooseFirmwareForBurning.key}>\n        <MDBCol>\n        <MDBDropdown>\n          <MDBDropdownToggle\n            outline\n            color=\"mdb-color\"\n          >Choose Firmware\n          </MDBDropdownToggle>\n          <MDBDropdownMenu>\n          {(()=>{\n               return this.store.chooseFirmwareForBurning.firmwareVersions.map(firmwareVersion=>{\n                  return (\n                    <MDBDropdownItem\n                      key={uuidv4()}\n                      onClick={()=>{\n                        this.store.chooseFirmwareForBurning.firmwareChoosed = firmwareVersion\n                        this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n                      }}\n                    > \n                      {firmwareVersion}\n                    </MDBDropdownItem>\n                  )\n               })\n          })()}\n          </MDBDropdownMenu>\n        </MDBDropdown>\n        </MDBCol>\n        <MDBCol>\n          Firmware Choosed: {this.store.chooseFirmwareForBurning.firmwareChoosed}\n        </MDBCol>   \n      </MDBRow>\n    )\n  }\n\n  toggleModal = () => {\n    // this.setState({ showModal: !this.state.showModal });\n    this.store.showModal = !this.store.showModal\n    this.store.commandSetting.commandInput=\"\"\n    this.store.expect.logDebugInput=\"\"\n    this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n  };\n\n  closeModalHandle = () => {\n    this.store.showModal = !this.store.showModal\n    this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n  };\n\n  mousePositionGpioSettingButtonHandle = (mouseEnter, pinSetting) => {\n    let indexPinSetting = this.store.pinSettings.indexOf(pinSetting);\n    this.store.pinSettings[indexPinSetting].onMouseIn = mouseEnter;\n    this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n  }\n\n  renderInputCommandGroup = commandSetting => {\n    return(  \n      <React.Fragment key={commandSetting.key}>\n      <MDBRow style={{ margin: \"20px\" }}>\n          <MDBCol>\n            {/* render command into input command  */}\n          <MDBInput label=\"Command\" onChange={e=>{\n            this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting.commandInput = e.target.value\n            this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store)\n          }}\n          />\n          </MDBCol>\n          <MDBCol>\n          <MDBBtn outline color=\"mdb-color\"\n            // append new command \n            // the command has two args\n            // 1. what command is \n            // 2. timelength command\n            onClick={()=>{\n\n              if (this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting.commandInput === \"\") {\n                \n                this.setState((state)=>{\n                  return {\n                    commandInputEmpty: true\n                  }\n                });\n\n                return\n              } else {\n                this.setState((state)=>{\n                  return {\n                    commandInputEmpty: false\n                  }\n                });\n              }\n\n              this.store.commandSetting.commands.push({\n                command:  this.store.commandSetting.commandInput,\n                timeLength: 500,\n                key: uuidv4()\n                });\n              \n              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n              }}\n              >\n              <i className=\"fas fa-plus\">Add</i> \n              </MDBBtn>\n                {(()=>{if(this.state.commandInputEmpty){\n                  return <dir style={{color: \"red\"}}> command input is empty </dir>\n                }})()}\n          </MDBCol>\n        </MDBRow>\n          \n        <MDBRow style={{ margin: \"20px\" }}>\n            {/* render command inputed  */}\n          {(()=>{\n            return this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting.commands.map(command=>{\n              return (\n              <MDBBtn \n              // remove choosed command \n              onClick={()=>{\n                let id = this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting.commands.indexOf(command)\n                this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting.commands.splice(id, 1);\n                this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n              }}\n              key={command.key} \n              color=\"mdb-color\" \n              >{command.command}</MDBBtn>)\n            });\n          })()}\n        </MDBRow>\n        </React.Fragment>)\n  };\n\n  renderDelayActions = () => {\n    return (\n      <MDBRow style={{ margin: \"20px\" }}>\n        <MDBCol>\n          <MDBInput\n            key={this.store.delayAction.key}\n            label={(()=>{\n              if(this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].delayAction.delayTime) {\n                return \"Delay: \" + this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].delayAction.delayTime + \" ms\" \n              } else {\n                return \"Delay Time\"\n              }\n            })()}\n            onChange={(e)=>{\n              if (!isNaN(e.target.value)) {\n                this.store.delayAction.delayTime = e.target.value\n                this.store.delayAction.inputError = false\n              } else {\n                this.store.delayAction.inputError = true\n              }\n\n              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n            }}\n          >\n          </MDBInput>\n          {(()=>{\n            if (this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].delayAction.inputError) {\n              return (\n                <p style={{color:\"red\"}}>You Must Input Number</p>\n              )\n            }\n          })()}\n        </MDBCol>\n      </MDBRow>\n    )\n  }\n\n  renderSettedGpioActions = actions => {\n    if (actions === undefined) {\n      return;\n    }\n\n    return actions.map(action => {\n      if (action.on) {\n        return (\n          <ToolTip\n            key={action.key}\n            style={{\n              backgroundColor: \"#92a8d1\",\n              width: action.timeLength\n            }}\n            toolTipMs={action.timeLength}\n          />\n        );\n      } else {\n        return (\n          <ToolTip\n            key={action.key}\n            style={{\n              backgroundColor: \"#7CFC00\",\n              width: action.timeLength\n            }}\n            toolTipMs={action.timeLength}\n          />\n        );\n      }\n    });\n  };\n\n  renderGpioButtonSettingGroup = pinSetting => {\n    if (pinSetting.onMouseIn) {\n      return (\n        <MDBRow style={{ margin: \"20px\" }}> \n        <MDBBtnGroup>\n          {/* Choose state gpio */}\n          <SwitchButton\n            pinState={pinSetting.pinState}\n            onClick={() => {\n              let indexPin = this.store.pinSettings.indexOf(pinSetting);\n              this.store.pinSettings[indexPin].pinState = !this.store.pinSettings[indexPin].pinState;\n\n              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n            }}\n          />\n          <MDBBtn\n            // increase timeLength Action\n            onClick={() => {\n              let indexPin = this.store.pinSettings.indexOf(pinSetting);\n              let lastIndexAction = this.store.pinSettings[indexPin].actions.length - 1;\n              \n              if (lastIndexAction === -1) {\n                lastIndexAction = 0;\n                this.store.pinSettings[indexPin].actions.push({\n                  on: pinSetting.pinState,\n                  timeLength: 0,\n                  key: uuidv4()\n                });\n              }\n\n              this.store.pinSettings[indexPin].actions[lastIndexAction].timeLength -= 50;\n\n              if (this.store.pinSettings[indexPin].actions[lastIndexAction].timeLength < 0) {\n                this.store.pinSettings[indexPin].actions.splice(-1, 1);\n              }\n\n              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n            }}\n            outline\n            color=\"mdb-color\"\n          >\n            <i className=\"fas fa-minus\" />\n          </MDBBtn>\n          <MDBBtn\n          // Decrease timeLength Action\n            onClick={() => {\n              let indexPin = this.store.pinSettings.indexOf(pinSetting);\n              let lastIndexAction = this.store.pinSettings[indexPin].actions.length - 1;\n              \n              if (lastIndexAction === -1) {\n                lastIndexAction = 0;\n                this.store.pinSettings[indexPin].actions.push({\n                  on: pinSetting.pinState,\n                  timeLength: 0,\n                  key: uuidv4()\n                });\n              }\n\n              if (this.store.pinSettings[indexPin].actions[lastIndexAction].on === pinSetting.pinState) {\n                this.store.pinSettings[indexPin].actions[lastIndexAction].timeLength += 50;\n              } else {\n                this.store.pinSettings[indexPin].actions.push({\n                  on: pinSetting.pinState,\n                  timeLength: 50,\n                  key: uuidv4()\n                });\n              }\n\n              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n            }}\n\n            outline\n            \n            color=\"mdb-color\"\n          >\n            <i className=\"fas fa-plus\" />\n          </MDBBtn>{\" \"}\n        </MDBBtnGroup>\n        </MDBRow>\n      );\n    } else {\n      return (\n        <MDBBtn outline color=\"mdb-color\">\n          <i className=\"fas fa-bolt\">{pinSetting.pinName}</i>\n        </MDBBtn>\n      );\n    }\n  };\n\n  renderGpioActions = pinSettings => {\n    return pinSettings.map(pinSetting => {\n      return (\n        <React.Fragment key={pinSetting.key}>\n          {/* RENDER GPIO ACTIONS */}\n          <MDBRow\n            style={{\n              margin: \"20px\"\n            }}\n            onMouseEnter={this.mousePositionGpioSettingButtonHandle.bind(this, true, pinSetting)}\n            onMouseLeave={this.mousePositionGpioSettingButtonHandle.bind(this, false, pinSetting)}\n          >\n            {this.renderGpioButtonSettingGroup(pinSetting)}\n          </MDBRow>\n          <MDBRow style={{ margin: \"20px\" }}>\n              {this.renderSettedGpioActions(pinSetting.actions)}\n          </MDBRow>\n          {/* RENDER GPIO ACTION */}\n        </React.Fragment>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <MDBContainer>\n          <div\n            onMouseEnter={()=>{this.setState(state => {\n              return {\n                mouseEnterActionButton: true\n              }\n            })}}\n            \n            onMouseLeave={()=>{this.setState(state => {\n              return {\n                mouseEnterActionButton: false\n              }\n            })}}\n          >\n            <MDBBtn outline \n              color={(()=>{\n                    if(this.props.type === \"in testing...\" || this.state.mouseEnterActionButton) {\n                      return \"warning\"\n                    } else  {\n                      return \"mdb-color\"\n                    }\n                    })()} \n                \n              onClick={this.toggleModal}\n            >\n              <i className=\"fas fa-cogs\" /> {(()=>{\n                if (this.state.mouseEnterActionButton) {\n                  return <>Config Action</>\n                } else {\n                    return this.props.type\n                }\n              })()}\n            </MDBBtn>\n          </div>\n          <MDBModal\n            size=\"lg\"\n            isOpen={this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].showModal}\n            toggle={this.toggleModal}\n          >\n            <MDBModalBody>\n              <MDBContainer style={{ margin: \"60px\" }}>\n                {(()=>{\n                  if (this.props.type === \"gpio\") {\n                    return this.renderGpioActions(this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].pinSettings)\n                  \n                  } \n                  \n                  else if (this.props.type === \"eraseFirmware\") {\n                    return \n                  } \n                  \n                  else if (this.props.type ===\"burnFirmware\") {\n                    return this.renderChooseFirmwareForburningButton()\n                  }\n                  \n                  else if (this.props.type === \"command\") {\n                   return this.renderInputCommandGroup(this.context.scenarioTests[this.props.scenarioTestId].actions[this.props.actionId].commandSetting)\n                  } \n\n                  else if (this.props.type === \"delay\") {\n                    return this.renderDelayActions()\n                  }\n                })()}\n\n                <MDBRow style={{ margin: \"20px\" }}>\n                  <MDBCol>\n                    <MDBInput label=\"What do you expect from log debug ?\"\n                      onChange={(e)=>{\n                        this.store.expect.logDebugInput = e.target.value\n                        this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n                      }}\n                    />\n                  </MDBCol>\n                  <MDBCol>\n                  <MDBBtn\n                  // adding expect log debug  \n                  outline \n                  color=\"mdb-color\"\n                    onClick={()=>{\n\n                      if (this.store.expect.logDebugInput === \"\") {\n                        \n                        this.setState((state)=>{\n                          return {\n                            logInputEmpty: true\n                          }\n                        });\n\n                        return\n                      } else {\n                        \n                        this.setState((state)=>{\n                          return {\n                            logInputEmpty: false\n                          }\n                        });\n                      \n                      }\n\n                      this.store.expect.logDebugs.push({\n                        logDebug: this.store.expect.logDebugInput,\n                        key: uuidv4()\n                      });\n                      this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n                    }}\n                  > Add </MDBBtn>\n\n                  {(()=>{\n                    if (this.state.logInputEmpty) {\n                      return <div style={{color: \"red\"}}> you should input expect log output </div>\n                    }\n                  })()}\n\n                  </MDBCol>        \n                </MDBRow>\n                <MDBRow style={{ margin: \"20px\" }}>\n                  \n                  {/* render expected output log */}\n                    {(()=>{\n                      return this.store.expect.logDebugs.map(logDebug=>{\n                        return (\n                        <MDBBtn\n                          onClick={\n                            ()=>{\n                              let id = this.store.expect.logDebugs.indexOf(logDebug);\n                              this.store.expect.logDebugs.splice(id, 1);\n                              this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n                          }\n                        }  \n                        color=\"mdb-color\"\n                        key={logDebug.key}\n                        >{logDebug.logDebug}</MDBBtn>)\n                      })\n                    })()}\n                  \n                </MDBRow>\n\n                {/* EXPECT OUTPUT LOG */}   \n                <MDBRow style={{ margin: \"20px\" }}>\n                  {/* get input timeout error */}\n                  <MDBCol>  \n                    <MDBInput label={\"TimeOut Error: \"+this.store.expect.timeoutError+' ms'} \n                    onChange={(e)=>{\n                      this.store.expect.timeoutError = e.target.value;\n                      \n                      // valid on input \n                      if (isNaN(this.store.expect.timeoutError)) {\n                        this.store.expect.invalidInputTimeoutError = \"you must input number\";\n                      } else {\n                        this.store.expect.invalidInputTimeoutError ='';\n                      }\n                      this.context.actionSynchronousState(this.props.scenarioTestId, this.props.actionId, this.store);\n                  }}\n                  />\n                  {/* render ms invalid input */}\n                  {(()=>{\n                    if (this.store.expect.invalidInputTimeoutError) {\n                      return <p style={{color:\"red\"}}>{this.store.expect.invalidInputTimeoutError}</p>\n                    } else {\n                      return \n                    }\n                  })()}\n                  </MDBCol>\n                </MDBRow >\n\n              </MDBContainer>\n            </MDBModalBody>\n            <MDBModalFooter>\n            <MDBBtn outline color=\"warning\" onClick={()=>{\n                        this.context.deleteAction(this.props.scenarioTestId, this.props.actionId)\n                      }}>\n                            <i className=\"fas fa-cogs\" /> Delete Action\n              </MDBBtn>\n              <MDBBtn outline color=\"mdb-color\" onClick={this.toggleModal}>\n                Close\n              </MDBBtn>\n            </MDBModalFooter>\n          </MDBModal>\n        </MDBContainer>\n      </div>\n    );\n  }\n}\n\nexport default Action","import React, { useDebugValue } from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport {\n  MDBContainer,\n  MDBBtn,\n  MDBModal,\n  MDBModalBody,\n  MDBModalHeader,\n  MDBModalFooter,\n  MDBInput,\n  MDBCol,\n  MDBRow,\n  MDBProgress,\n  MDBBtnGroup,\n  MDBTooltip,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n} from \"mdbreact\";\nimport Action from \"./Action\"\nimport {ScenarioTestFactoryContext} from \"../contextCreateBoot\"\nimport uuidv4 from \"../utility\"\n\n\nclass ScenarioTest extends React.Component {\n  static contextType = ScenarioTestFactoryContext\n  constructor(props) {\n    super(props);\n    this.store = {}\n    this.state = {\n      inputNumLoopError: false,\n      chooseActionTypes: true\n    }\n  }\n\n  componentWillMount = ()=>{\n    // console.log(\"componentWillMount-------> compose store with scenarioTest it belong to\")\n    this.store = {\n      typeAction: {\n        gpio: \"gpio\",\n        eraseFirmware: \"eraseFirmware\",\n        burnFirmware: \"burnFirmware\",\n        command: \"command\",\n        delay: \"delay\"\n      },\n      actions: [],\n      name: \"\",\n      numLoop: \"\",\n      createActionButton: {\n        mouseEnter: false,\n        key: uuidv4()\n      },\n      scenarioTestId: this.props.scenarioTestId\n    }\n\n    this.store = {...this.store, ...this.context.scenarioTests[this.props.scenarioTestId]}\n\n    // console.log(\">>>>>>>>>componentWillMount\")\n    // console.log(\"this.store.scenarioTestId: \", this.store.scenarioTestId)\n    // console.log(\"this.props.scenarioTestId: \", this.props.scenarioTestId)\n  }\n\n  componentWillUpdate = ()=>{\n    // this.store = {...this.store ,...this.context.scenarioTests[this.props.scenarioTestId]}\n  }\n\n  createAction = (type) => {\n    this.store.actions.push({\n      type: type,\n      name: null,\n      key: uuidv4()\n    })\n\n    this.context.scenarioTestSynchronousState(this.props.scenarioTestId, this.store);\n  };\n\n  mouseEnterCreateActionButtonHandle = (mouseEnter) => {\n    this.store.createActionButton.mouseEnter = mouseEnter\n    this.context.scenarioTestSynchronousState(this.props.scenarioTestId, this.store);\n  }\n\n  renderActions = () => {\n    // console.log(\"render for this.store.scenarioTestId: \", this.store.scenarioTestId)\n    // console.log(\"render for this.props.scenarioTestId: \", this.props.scenarioTestId)\n    return this.store.actions.map((action, id) => {\n        return (<Action key={action.key} type={action.type} \n                  name={action.name} scenarioTestId={this.props.scenarioTestId}\n                  actionId={id}\n                />);\n    });\n  };\n\n  renderCreateActionButton = () => {\n    return (<div \n        onClick={()=>{\n          this.setState(state=>{\n            return {\n              chooseActionTypes: !state.chooseActionTypes\n            }\n          })\n        }}\n      >\n\n        <MDBDropdown>\n          <MDBDropdownToggle\n            color=\"mdb-color\"\n            outline\n          >\n            <i className=\"fas fa-plus\"> Create Action </i>\n          </MDBDropdownToggle>\n          <MDBDropdownMenu>\n              {(()=>{\n                return Object.keys(this.store.typeAction).map((key, index)=>{\n                  return (<MDBDropdownItem color=\"mdb-color\" \n                            onClick={this.createAction.bind(this, this.store.typeAction[key])} \n                            type={this.store.typeAction[key]} \n                            key={uuidv4()}>\n                                {key} \n                          </MDBDropdownItem> )\n                  })\n              })()}\n          </MDBDropdownMenu>\n        </MDBDropdown>\n    </div>)\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <MDBRow>\n          <MDBCol>\n            <MDBInput label={(()=>{\n                if (this.store.name === \"\") {\n                  return \"Input test scenario name\"\n                } else {\n                  return \"Setted Name: \" + this.store.name\n                }\n              })()} \n\n              onChange={(e)=>{\n                this.context.scenarioTestStoreName(this.props.scenarioTestId, e.target.value);\n              }}\n            />\n          </MDBCol>\n          <MDBCol>\n            <MDBInput label={(()=>{\n                if (this.store.numLoop === \"\") {\n                  return \"Loop number\"\n                } else {\n                  return \"Setted Num: \" + this.store.numLoop\n                }\n              })()} \n\n              onChange={(e)=>{\n                if (isNaN(e.target.value)) {\n                  this.setState((state)=>{\n                    return {\n                      inputNumLoopError: true\n                    }\n                  });\n                  return\n                } else {\n                  this.setState((state)=>{\n                    return {\n                      inputNumLoopError: false\n                    }\n                  })\n                }\n\n                this.context.scenarioTestStoreNumloop(this.props.scenarioTestId, e.target.value);\n              }}/>\n\n              {(()=>{if(this.state.inputNumLoopError){return <div style={{color: \"red\"}}>Num Loop Should Be A number</div>}})()}\n          </MDBCol>\n          <MDBCol>\n            <div className=\"text-right\">\n            <MDBBtn outline color=\"warning\" onClick={this.context.deleteScenarioTest.bind(null, this.props.scenarioTestId)}>\n              <i className=\"fas fa-trash-alt\"> Delete This Test </i>\n            </MDBBtn>\n            </div>\n          </MDBCol>\n        </MDBRow>\n        <MDBRow>\n          {this.renderActions()}\n          {this.renderCreateActionButton()}\n        </MDBRow>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ScenarioTest","import React from \"react\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport { MDBBtn, MDBRow, MDBCol, MDBBtnGroup, MDBInput } from \"mdbreact\";\n\nimport ScenarioTest from \"./Components/ScenarioTest\";\nimport { ScenarioTestFactoryContext, AppContext } from \"./contextCreateBoot\";\n\nimport uuidv4 from \"./utility\";\nimport axios from 'axios';\n\nclass ScenarioTestFactory extends React.Component {\n  static contextType = AppContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      saveButton: {\n        openForm: false,\n        inputNameBoot: \"\",\n        inputDescription: \"\"\n      }\n    };\n  }\n\n  appendNewScenarioTest = (name, numLoop) => {\n    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal.push({\n      key: uuidv4(),\n      actions: []\n    })\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  deleteScenarioTest = scenarioTestId => {\n    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal.splice(scenarioTestId, 1);\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  scenarioTestStoreName = (scenarioTestId, name) => {\n    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal[scenarioTestId].name = name;\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  scenarioTestStoreNumloop = (scenarioTestId, numLoop) => {\n    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal[scenarioTestId].numLoop = numLoop;\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  deleteAction = (scenarioTestId, idAction) => {\n    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal[scenarioTestId].actions.splice(idAction, 1);\n\n    console.log(\"scenarioTestsGlobal[scenarioTestId].actions: \", scenarioTestsGlobal[scenarioTestId].actions)\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  scenarioTestSynchronousState = (scenarioTestId, scenarioTestStore) => {\n    let scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal[scenarioTestId] = scenarioTestStore\n\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  actionSynchronousState = (idScenarioTest, idAction, actionStore) => {\n    let scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n    scenarioTestsGlobal[idScenarioTest].actions[idAction] = actionStore\n    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal);\n  };\n\n  renderSaveButton = () => {\n    if (this.state.saveButton.openForm) {\n      return (\n        <MDBRow>\n          {/* <MDBCol>\n            <input\n              onChange={e => {\n                var valueInput = e.target.value\n                this.setState(state => {\n                  state.saveButton.inputNameBoot = valueInput;\n                  return {\n                    saveButton: state.saveButton\n                  };\n                });\n              }}\n              label=\"Name Boot\"\n            />\n            <input\n              onChange={e => {\n                var valueInput = e.target.value\n                this.setState(state => {\n                  state.saveButton.inputDescription = valueInput;\n                  return {\n                    saveButton: state.saveButton\n                  };\n                });\n              }}\n              label=\"Description\"\n            />\n          </MDBCol> */}\n\n\n\n          <input\n            placeholder=\"Boot name\"\n            style={{marginRight: 20, marginLeft: 20}}\n            onChange={e => {\n              var valueInput = e.target.value\n              this.setState(state => {\n                state.saveButton.inputNameBoot = valueInput;\n                return {\n                  saveButton: state.saveButton\n                };\n              });\n            }}\n            label=\"Boot name\"\n          />\n          <input\n            style={{marginRight: 20}}\n            onChange={e => {\n              var valueInput = e.target.value\n              this.setState(state => {\n                state.saveButton.inputDescription = valueInput;\n                return {\n                  saveButton: state.saveButton\n                };\n              });\n            }}\n           placeholder=\"Boot description\"\n            label=\"Description\"\n          />\n\n          <MDBBtn\n            style={{marginRight: 20}}\n            onClick={() => {\n              console.log(\"scenarioTestsGlobal saved\", this.context.scenarioTestsGlobal)\n              axios.post(\"/boot_save\", {\n                data: this.context.scenarioTestsGlobal,\n                bootName: this.state.saveButton.inputNameBoot,\n                description: this.state.saveButton.inputDescription\n              }).then(response => {\n                console.log(response)\n              })\n                .catch(err => {\n                  console.log(\"post data error: \", err)\n                })\n              // console.log(\"saved boot\");\n            }}\n            color=\"mdb-color\"\n          >\n            Ok\n          </MDBBtn>\n          <MDBBtn\n            onClick={() => {\n              this.setState(state => {\n                state.saveButton.openForm = false;\n                return {\n                  saveButton: state.saveButton\n                };\n              });\n            }}\n            color=\"mdb-color\"\n            outline\n          >\n            Cancel\n          </MDBBtn>\n\n\n          {/* <MDBCol>\n            <MDBBtn\n              onClick={() => {\n                console.log(\"scenarioTestsGlobal saved\", this.context.scenarioTestsGlobal)\n                axios.post(\"/boot_save\", {\n                  data: this.context.scenarioTestsGlobal,\n                  bootName: this.state.saveButton.inputNameBoot,\n                  description: this.state.saveButton.inputDescription\n                }).then(response => {\n                  console.log(response)\n                })\n                  .catch(err => {\n                    console.log(\"post data error: \", err)\n                  })\n                // console.log(\"saved boot\");\n              }}\n              color=\"mdb-color\"\n            >\n              Ok\n            </MDBBtn>\n            <MDBBtn\n              onClick={() => {\n                this.setState(state => {\n                  state.saveButton.openForm = false;\n                  return {\n                    saveButton: state.saveButton\n                  };\n                });\n              }}\n              color=\"mdb-color\"\n              outline\n            >\n              Close\n            </MDBBtn>\n          </MDBCol> */}\n\n        </MDBRow>\n      );\n    } else {\n      return (\n        <MDBBtn\n          color=\"mdb-color\"\n          outline\n          onClick={() => {\n            this.setState(state => {\n              state.saveButton.openForm = true;\n              return {\n                saveButton: state.saveButton\n              };\n            });\n          }}\n        >\n          Save Boot\n        </MDBBtn>\n      );\n    }\n  };\n\n  renderScenarioTests = scenarioTests => {\n    if (scenarioTests === null) {\n      return;\n    }\n    return scenarioTests.map((scenarioTest, index) => {\n      return (\n        <ScenarioTest\n          name={scenarioTest.name}\n          numLoop={scenarioTest.numLoop}\n          key={scenarioTest.key}\n          scenarioTestId={index}\n        />\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <ScenarioTestFactoryContext.Provider\n          value={{\n            scenarioTestSynchronousState: this.scenarioTestSynchronousState,\n            actionSynchronousState: this.actionSynchronousState,\n            deleteScenarioTest: this.deleteScenarioTest,\n            scenarioTests: this.context.scenarioTestsGlobal,\n            scenarioTestStoreName: this.scenarioTestStoreName,\n            scenarioTestStoreNumloop: this.scenarioTestStoreNumloop,\n            deleteAction: this.deleteAction,\n            bootSocket: this.context.socketIoContext\n          }}\n        >\n          {this.renderScenarioTests(this.context.scenarioTestsGlobal)}\n          <MDBBtnGroup style={{ width: \"100%\", marginTop: 20 }}>\n            <MDBBtn\n              style={{ marginRight: 20 }}\n              onClick={this.appendNewScenarioTest}\n              color=\"mdb-color\"\n              outline\n            // style={{width: \"90%\"}}\n            >\n              Create new test scenario\n            </MDBBtn>\n            {/* <MDBInput>NameBoot</MDBInput> */}\n            {this.renderSaveButton()}\n          </MDBBtnGroup>\n        </ScenarioTestFactoryContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default ScenarioTestFactory;\n","import React from \"react\";\nimport {\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBBtn,\n  MDBRow,\n  MDBCol,\n  MDBBtnGroup\n} from \"mdbreact\";\nimport { AppContext,  ScenarioTestFactoryContext} from \"../contextCreateBoot\";\nimport axios from \"axios\";\nimport uuidv4 from \"../utility\";\n\n\nclass BootChoosing extends React.Component {\n  static contextType = AppContext;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      bootInfos: []\n    };\n  }\n\n  componentWillMount() {\n    this.getBootInfo();\n  }\n\n  componentDidUpdate() {\n\n  }\n\n  getBootInfo = () => {\n    axios.get(\"/api/get_boot_infos\").then(data => {\n      let dataBoots = data.data.data;\n      let bootInfos = [];\n      dataBoots.map(d => {\n        bootInfos.push({\n          bootName: d.bootName,\n          description: d.description,\n          data: d.data,\n          id: d._id,\n          key: uuidv4(),\n          onMouseEnter: false\n        });\n      });\n\n      this.setState(state => {\n        return {\n          bootInfos: bootInfos\n        };\n      });\n\n      console.log(\"get boot infos \", dataBoots);\n    });\n  };\n\n  mouseEnterChoosingItemHandle = (item, mouseEnter) => {\n    let idItem = this.state.bootInfos.indexOf(item);\n    // console.log(\"item \", item, \"idItem\", idItem)\n    this.setState(state=>{\n      // console.log(\"state.bootInfos[idItem]\", state.bootInfos[idItem])\n      state.bootInfos[idItem].onMouseEnter = mouseEnter;\n      return {\n        bootInfos: state.bootInfos\n      }\n    })\n  }\n\n  renderItems = () => {\n    return this.state.bootInfos.map(info => {\n      return (\n        <div key={info.key} style={{width:\"100%\"}}\n        onMouseEnter={this.mouseEnterChoosingItemHandle.bind(null, info, true)}\n        onMouseLeave={this.mouseEnterChoosingItemHandle.bind(null, info, false)}>\n          {(()=>{\n            if (info.onMouseEnter) {\n              return ( <MDBBtnGroup>\n                <MDBBtn\n                  outline\n                  color=\"mdb-color\"\n                  onClick={() => {\n                    let d = JSON.parse(info.data)\n                    let scenarioTests = d\n                    let name = info.bootName\n                    this.context.choosedBootHandle(name, scenarioTests)\n                  }}                 \n                >\n                  Choose Boot\n                </MDBBtn>\n                <MDBBtn\n                  outline\n                  color=\"warning\"\n                  onClick={() => {\n                    axios\n                      .get(`/api/deleteBoot?id=${info.id}`)\n                      .then(res => {\n                      });\n                  }}\n                >\n                  Delete Boot\n                </MDBBtn>\n              </MDBBtnGroup> )\n              } else {\n              return (<MDBDropdownItem> <b>Name: </b> {info.bootName} <b>Description: </b>{info.description}</MDBDropdownItem>)\n              }\n            }\n          )()\n        } \n      </div>)\n    })\n  }\n\n  render() {\n    return (\n      <MDBDropdown>\n        <MDBDropdownToggle\n          color=\"mdb-color\"\n          onClick={() => {\n            this.getBootInfo();\n          }}\n          disabled={this.props.disabled}\n          outline\n        >\n          Choose Boot\n        </MDBDropdownToggle>\n        <MDBDropdownMenu basic>\n            {this.renderItems()}\n            <MDBBtn \n              style={{width:\"100%\"}}\n              color=\"mdb-color\"\n              outline\n              onClick={()=>{\n                this.context.setStoreScenarioTestsToGlobal([])\n                this.context.setCreateBootView(true)\n              }}\n            >Create New Boot</MDBBtn>\n        </MDBDropdownMenu>\n      </MDBDropdown>\n    );\n  }\n}\n\nexport default BootChoosing;\n","import React, { Component } from \"react\";\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport TextField from '@material-ui/core/TextField';\nimport {SocketIoContext}  from \"./contextCreateBoot\"\nimport './serialDisplay.css'\nimport { FormLabel } from \"@material-ui/core\";\n\nclass SerialDisplay extends Component {\n  static contextType = SocketIoContext\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      serialData: [],\n      serialCommandInput: '',\n      senddingSerialCommandFail: null,\n      isAutoScroll: true\n    }\n    this.textLog = React.createRef();\n  }\n\n  renderSerialCommandInput = () => (\n      <TextField\n        style={{\n          marginBottom: '22px'\n        }} \n        id=\"standard-basic\" \n        onChange={(e)=>{\n          var value = e.target.value\n          this.setState(state=>{\n              return {\n                  serialCommandInput: value\n              }\n          })\n        }}\n        onKeyDown={(e)=>{\n            console.log(\"send command\")\n            if(e.key===\"Enter\") {\n                this.context.bootSocket.emit(\"sendSerial\", this.state.serialCommandInput)\n            }\n        }}\n        fullWidth={true}\n        label=\"Box Command\" \n    />\n)\n  \n  shouldComponentUpdate(nextProp, nextState) {\n    return nextState.serialData !== this.state.serialData \n  }\n\n  autoScrollingCheckBox = (\n    <FormControlLabel\n      control={<Checkbox\n        onChange={(e) => {\n          let checked = e.target.checked\n          this.setState(state => ({\n            isAutoScroll: !checked\n          }))\n        }}\n      />}\n      label=\"Stop Auto Scroll\"\n    />\n  )\n\n  renderSerialData() {\n    return this.state.serialData.map(data=>{\n      return (\n      <p>{data}</p>\n      )\n    })\n  }\n\n  componentDidMount() {\n    this.context.bootSocket.on(\"serialData\", (serialData)=>{\n      let d = [...this.state.serialData]\n      d.push(serialData)\n      if (d.length> 2000) d = []\n      this.setState(state=>{\n        return {\n          serialData: d\n        }\n      })\n    })\n  }\n\n  componentWillUnmount() {\n    this.context.bootSocket.removeListener(\"serialData\")\n    // this.context.setBackupSerialData(this.state.serialData)\n    console.log(\"serial display unmount\")\n  }\n\n\n  componentDidUpdate() {\n    if(this.state.isAutoScroll) this.textLog.current.scrollTop = this.textLog.current.scrollHeight; \n  }\n\n  render() {\n    return (\n        <div>\n          <div style={{\n            display: 'flex'\n          }}>\n            {this.autoScrollingCheckBox} \n            {this.renderSerialCommandInput()}\n          </div>\n          <div ref={this.textLog} class=\"serialDisplay\">\n            {this.renderSerialData()}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SerialDisplay;\n\n","import React from 'react';\nimport {\n    MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle,\n    MDBCardText, MDBCol, MDBBtnGroup, MDBRow,\n    MDBDropdownMenu, MDBDropdownItem, MDBDropdown,\n    MDBDropdownToggle, MDBBadge\n} from 'mdbreact';\n\n// import {NotificationContainer, NotificationManager} from 'react-notifications';\nimport uuidv4 from \"../utility\"\nimport BootChoosing from \"./BootChoosing\";\nimport { AppContext } from \"../contextCreateBoot\"\nimport SerialDisplay from \"../SerialDisplay\"\n\nclass Qctool extends React.Component {\n    static contextType = AppContext;\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            boxInfos: {\n                firmwareVersion: \"\",\n                efuse: \"\",\n                macAddress: \"\",\n                imgsInFlash: \"\",\n                brokenImageCount: \"\",\n                batteryLevel: \"\",\n                isWifiConnected: false,\n                rssi: \"\"\n            },\n\n            statusDevice: {\n                port: null,\n                type: null\n            },\n\n            storedFirmwareVersions: [],\n\n            statusBurningFirmware: \"BurnFirmware\",\n\n            serialCommandInput: null,\n\n            senddingSerialCommandFail: false\n        }\n\n        this.firmwareVersionStored = []\n    }\n\n    componentWillUnmount() {\n        this.context.socketIoContext.off()\n    }\n\n    componentDidMount() {\n        setTimeout(\n            () => {\n                this.context.socketIoContext.on(\"deviceBusy\", dummy => {\n                    this.context.setHardwareInBusy(true);\n                });\n\n                this.context.socketIoContext.on(\"bootBeginRunAction\", (actionBeginRunningKey) => {\n                    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n                    console.log(\"scenarioTestsGlobal: \", scenarioTestsGlobal)\n                    scenarioTestsGlobal.map(ScenarioTest => {\n                        ScenarioTest.actions.map((action, id) => {\n                            if (action.key === actionBeginRunningKey) {\n                                // console.log(\"bootBeginRunAction: \", actionBeginRunningKey)\n                                ScenarioTest.actions[id].type = \"in testing...\"\n                            }\n                        })\n                    })\n                    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal)\n\n                });\n\n                this.context.socketIoContext.on(\"bootDoneRunAction\", (actionDoneRunning) => {\n                    // console.log(\"actionDone Running: \", actionDoneRunning)\n\n                    const scenarioTestsGlobal = [...this.context.scenarioTestsGlobal]\n                    scenarioTestsGlobal.map(ScenarioTest => {\n                        ScenarioTest.actions.map(action => {\n                            if (action.key === actionDoneRunning.key) {\n                                action.type = actionDoneRunning.type\n                            }\n                        })\n                    })\n                    this.context.setStoreScenarioTestsToGlobal(scenarioTestsGlobal)\n                });\n\n                this.context.socketIoContext.on(\"connectToDeviceStatus\", statusDevice => {\n                    // console.log(\"socket set status device: \", statusDevice)\n                    this.context.setConnectToDeviceStatus(statusDevice)\n                });\n\n                this.context.socketIoContext.on(\"storedFirmwareVersionsForQctool\", (storedFirmwareVersions) => {\n                    console.log(\"firmware: \", storedFirmwareVersions)\n                    // this.firmwareVersionStored = storedFirmwareVersions\n                    this.setState(state => {\n                        return {\n                            storedFirmwareVersions\n                        }\n                    })\n                });\n\n                this.context.socketIoContext.on(\"sendKeysStatus\", status => {\n                    this.context.setHardwareInBusy(false);\n                    if (status == 'SendKeysSuccessFull') {\n                        this.context.addNotification(\"sendKeysStatus\", status, \"success\", 5000);\n                    } else {\n                        this.context.addNotification(\"sendKeysStatus\", status, \"danger\", 5000);\n                    }\n                })\n\n                this.context.socketIoContext.on(\"statusBurnFirmware\", status => {\n                    this.context.setHardwareInBusy(true);\n\n                    if (status === \"beginBurnFirmware\") {\n                        this.context.addNotification(\"statusBurnFirmware\", status, \"success\", 3000);\n                        this.setState(state => {\n                            console.log(\"status: \", status)\n                            return {\n                                statusBurningFirmware: \"Burning Firmware...\"\n                            }\n                        });\n\n                    } else if (status === \"burnFirmwareSuccessFull\") {\n                        this.context.addNotification(\"statusBurnFirmware\", status, \"success\", 3000);\n                        this.setState(state => {\n                            return {\n                                statusBurningFirmware: \"Burn Firmware\"\n                            }\n                        });\n\n                        this.context.setHardwareInBusy(false);\n\n                    } else if (status === \"burnFirmwareFail\") {\n                        this.context.addNotification(\"statusBurnFirmware\", status, \"danger\", 5000);\n                        this.setState(state => {\n                            return {\n                                statusBurningFirmware: \"Burn Firmware\"\n                            }\n                        });\n                        this.context.setHardwareInBusy(false);\n                    }\n                });\n\n                this.context.socketIoContext.on(\"foundExpectedLogdebug\", (detailResult) => {\n                    this.context.addNotification(\"foundExpectedLogdebug\", JSON.stringify(detailResult), \"success\", 3000)\n                });\n\n                this.context.socketIoContext.on(\"showTestinResult\", testingResult => {\n                    this.context.pushNewTestingResult(testingResult)\n                    console.log(\"pushed testing result: \", testingResult)\n                })\n\n                this.context.socketIoContext.on(\"eraseFirmwareStatus\", status => {\n                    if (status === \"beginEraseFirmware\") {\n                        this.context.setHardwareInBusy(true);\n                        this.context.addNotification(\"eraseFirmwareStatus\", status, \"success\", 3000);\n                    } else if (status === \"eraseFirmwareDone\") {\n                        this.context.setHardwareInBusy(false);\n                        this.context.addNotification(\"eraseFirmwareStatus\", status, \"success\", 3000);\n                    } else {\n                        this.context.setHardwareInBusy(false);\n                        this.context.addNotification(\"eraseFirmwareStatus\", status, \"danger\", 3000);\n                    }\n                });\n\n                this.context.socketIoContext.on(\"bootDoneRunTestAutomation\", data => {\n                    console.log(\"bootDoneRunTestAutomation\")\n                    this.context.setHardwareInBusy(false);\n                });\n\n                this.context.socketIoContext.on(\"serialSendingStatus\", data => {\n                    if (data === \"success\") {\n                        this.setState(state => {\n                            return {\n                                senddingSerialCommandFail: false\n                            }\n                        });\n                    } else {\n                        this.setState(state => {\n                            console.log(\"sending fail\")\n                            return {\n                                senddingSerialCommandFail: true\n                            }\n                        });\n                    }\n                })\n\n                // ask what is going on at hardware side\n                this.context.socketIoContext.emit(\"qctoolRequestGetlistFirmware\", \"\")\n                this.context.socketIoContext.emit(\"requestStatusDevice\", \"\")\n            }, 1000);\n\n        // turn hardware process on and regis for new socket event first\n        this.context.socketIoContext.emit(\"turnQctoolToDiagnosisMode\", \"\")\n    }\n\n    runAction = (action) => {\n        this.context.socketIoContext.emit(\"runAction\", action);\n    }\n\n    runAutomationTest = async () => {\n        // scenarioTests = this.context.scenarioTestsGlobal}\n        this.context.setHardwareInBusy(true)\n        this.context.socketIoContext.emit(\"runBoot\", {\n            scenarioTests: this.context.scenarioTestsGlobal,\n            testingName: uuidv4()\n        })\n    }\n\n    renderInforQc = () => {\n        return (\n            <div style={{\n                display: 'fex',\n                flexDirection: 'column'\n            }}>\n                <h4>Box Info</h4>\n                <ul key={uuidv4()}>\n                    {Object.keys(this.state.boxInfos).map(key => {\n                        return (<li key={uuidv4()}><h5>{key}: {this.state.boxInfos.key}</h5></li>)\n                    })}\n                </ul>\n            </div>\n\n        );\n    }\n\n    renderBootChoosingBt = () => (\n        <BootChoosing disabled={this.context.hardwareInBusy} />\n    )\n\n    renderRunautomaticTestBt = () => (\n        <MDBBtn\n            outline\n            disabled={this.context.hardwareInBusy}\n            onClick={this.runAutomationTest}\n            color=\"mdb-color\">Run Automation Test\n        </MDBBtn>\n    )\n\n    renderSerialCommandInput = () => (\n        <div className=\"input-group\">\n            <input onChange={(e) => {\n                var value = e.target.value\n                this.setState(state => {\n                    return {\n                        serialCommandInput: value\n                    }\n                })\n            }}\n                onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                        this.context.socketIoContext.emit(\"sendSerial\", this.state.serialCommandInput)\n                    }\n                }}\n                style={(() => {\n                    if (this.state.senddingSerialCommandFail) {\n                        return {\n                            color: \"red\"\n                        }\n                    } else {\n                        return {\n                            color: \"\"\n                        }\n                    }\n\n                })()}\n                // ref={this.serialCommandInputComponenent} \n                type=\"text\" placeholder=\"Box Command\"\n                className=\"form-control form-control-lg\" />\n        </div>\n    )\n\n    renderBurnFirmwareButton = () => {\n        return (\n            <MDBDropdown>\n                <MDBDropdownToggle\n                    color=\"mdb-color\"\n                    outline\n                    disabled={this.context.hardwareInBusy}\n                >\n                    {this.state.statusBurningFirmware}\n                </MDBDropdownToggle>\n                <MDBDropdownMenu\n                >\n                    {(() => {\n                        return this.state.storedFirmwareVersions.map(firmwareVersion => {\n                            return (\n                                <MDBDropdownItem\n                                    key={uuidv4()}\n                                    onClick={() => {\n                                        this.context.socketIoContext.emit(\"clientRequestBurnFirmware\", firmwareVersion)\n                                    }}\n                                    color=\"mdb-color\"\n                                >\n                                    {firmwareVersion}\n                                </MDBDropdownItem>\n                            )\n                        })\n                    })()}\n                </MDBDropdownMenu>\n            </MDBDropdown>\n        )\n    }\n\n    renderEraseFirmwarePartiionButton = () => {\n        return <MDBBtn\n            color=\"mdb-color\"\n            outline\n            disabled={this.context.hardwareInBusy}\n            onClick={() => {\n                this.context.setHardwareInBusy(true)\n                this.context.socketIoContext.emit(\"eraseFirmware\", \"firmwarePartition\")\n            }}\n        >\n            ErasePartition\n        </MDBBtn>\n    }\n\n    renderEraseFirmwareButton = () => {\n        return (\n            <>\n                <MDBBtn\n                    color=\"mdb-color\"\n                    outline\n                    disabled={this.context.hardwareInBusy}\n                    onClick={() => {\n                        this.context.setHardwareInBusy(true)\n                        this.context.socketIoContext.emit(\"eraseFirmware\", \"\")\n                    }}\n                >\n                    Erase All\n                </MDBBtn>\n            </>\n        )\n    }\n\n    sendkeyBt = () => (\n        <MDBBtn\n            color=\"mdb-color\"\n            outline\n            disabled={this.context.hardwareInBusy}\n            onClick={() => {\n                this.context.setHardwareInBusy(true);\n                this.context.socketIoContext.emit('sendKeys', '')\n            }}\n        >\n            Send Keys\n        </MDBBtn>\n    )\n\n    renderStatusSerialPort = () => {\n        return (\n            <MDBBadge\n                color={this.context.connectToDeviceStatus.type === \"successful\" ? \"mdb-color\" : \"warning\"}\n                outline\n            >\n                Serial Port Connecting: {this.context.connectToDeviceStatus.port}\n            </MDBBadge>)\n    }\n\n    renderPrintLabelBt = (\n        <><MDBBtn color=\"mdb-color\" outline>Print Label</MDBBtn></>\n    )\n\n    render() {\n        return (\n            <MDBCard style={{ width: \"100%\" }}>\n                <MDBCardBody>\n                    <MDBCardTitle>\n                        {this.renderStatusSerialPort()}\n                    </MDBCardTitle>\n                    <MDBRow>\n                        <MDBCol md=\"2\">\n                            {this.renderInforQc()}\n                            <MDBRow>\n                                <MDBCol>\n                                    {this.renderBurnFirmwareButton()}\n                                </MDBCol>\n                                <MDBCol>\n                                    {this.renderEraseFirmwareButton()}\n                                </MDBCol>\n\n                                <MDBCol>\n                                    {this.renderEraseFirmwarePartiionButton()}\n                                </MDBCol>\n                                <MDBCol>\n                                    {this.renderPrintLabelBt}\n                                </MDBCol>\n                                <MDBCol>\n                                    {this.sendkeyBt()}\n                                </MDBCol>\n                                <MDBCol>\n                                    {this.renderBootChoosingBt()}\n                                </MDBCol>\n                                <MDBCol>\n                                    {this.renderRunautomaticTestBt()}\n                                </MDBCol>\n                            </MDBRow>\n                            {/* <div style={{\n                        display: 'flex',\n                        flexWrap: 'wrap'\n                    }}> */}\n\n                            {/* \n                        {this.renderBurnFirmwareButton()}\n                        {this.renderEraseFirmwareButton()}\n                        {this.renderPrintLabelBt}\n                        {this.sendkeyBt()}\n                        {this.renderBootChoosingBt()}\n                        {this.renderRunautomaticTestBt()} \n                        */}\n                            {/* </div> */}\n                            {/* {this.renderSerialCommandInput()} */}\n                        </MDBCol>\n                        <MDBCol fluid size={6}>\n                            <SerialDisplay />\n                        </MDBCol>\n                    </MDBRow>\n                </MDBCardBody>\n            </MDBCard>)\n    }\n}\n\n\n\nexport default Qctool;","import React from \"react\"\nimport {AppContext}  from \"../contextCreateBoot\"\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { MDBBtn } from \"mdbreact\"\nimport uuidv4 from \"../utility\"\n\n\nclass TesingResult extends React.Component {\n    static contextType = AppContext\n    constructor(props) {\n        super(props)\n    }\n\n    renderLogDebugsSearchedResult = (logDebugsSearchedResult) => {\n        return (<div key={uuidv4()}>\n            Pass:\n                <ul>\n                    {(()=>{\n                        return logDebugsSearchedResult.pass.map(p=>{\n                            return (<li>\n                                {JSON.stringify(p)}\n                            </li>)\n                        })\n                    })()}\n                </ul>\n            Fail:\n                <ul>\n                {(()=>{\n                        return logDebugsSearchedResult.error.map(e=>{\n                            return (<li>\n                                {JSON.stringify(e)}\n                            </li>)\n                        })\n                    })()}\n                </ul>\n        </div>)\n    }\n\n    renderTestingResultTable = (testingResult) => {\n        return (\n            <MDBTable key={uuidv4()}>\n                <MDBTableHead>\n                    <tr>\n                        {(()=>{                            \n                            return Object.keys(testingResult.results[0]).map(key=>{\n                                return <th key={uuidv4()}>{key}</th>\n                            })\n                        })()}        \n                    </tr>\n                </MDBTableHead>\n                    \n                <MDBTableBody>\n                        {(()=>{\n                            return testingResult.results.map(result=>{\n                                \n                                return (\n                                <tr>\n                                    {(()=>{\n                                        return Object.keys(result).map(key=>{\n                                            if (key === \"logDebugsSearchedResult\") {\n                                                console.log(\"render renderLogDebugsSearchedResult: \",result[key])\n                                                return this.renderLogDebugsSearchedResult(result[key])\n                                            } else {\n                                                return (<td>{JSON.stringify(result[key])}</td>)\n                                            }                                    \n                                                        \n                                        })\n                                    })()}\n                                </tr>)\n                            })\n                        })()}\n                </MDBTableBody>\n            </MDBTable>\n        )\n        \n    }\n\n    renderAllResult = () => {\n        return this.context.testingResults.map((testingResult, id)=>{\n            return (\n                    <>\n                        <MDBBtn\n                            outline\n                            color=\"mdb-color\"\n                            onClick={this.context.toogleShowDetailTestingResult.bind(null, id)}\n                        >\n                            Show Detail Testing For: {testingResult.testingName}\n                        </MDBBtn>\n                        <div>\n                            {(()=>{\n                                if (testingResult.showDetail) {\n                                    return this.renderTestingResultTable(testingResult)\n                                }\n                            })()}\n                        </div>\n                    </>\n                    )\n            // return this.renderTestingResultTable(testingResult)\n        })\n    }\n\n    render() {\n        console.log(\"this.context.testingResults: \", this.context.testingResults)\n        return (<>{this.renderAllResult()}</>)\n    }\n}\n\nexport default TesingResult;","import React from \"react\"\nimport {AppContext}  from \"../contextCreateBoot\"\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\nimport { MDBBtn } from \"mdbreact\"\nimport uuidv4 from \"../utility\"\nimport TestingResult from \"./TestingResult\"\n\n\nclass ManualTest extends React.Component {\n    static contextType = AppContext\n    constructor(props) {\n        super(props)\n    }\n\n    render () {\n        return this.context.testingResults.map((testingResult,id)=>{\n            let isError = false\n            testingResult.results.map(result=>{\n                console.log(\"result.logDebugsSearchedResult.error: \", result.logDebugsSearchedResult.error)\n            if (result.logDebugsSearchedResult.error.length > 0) {\n                    isError = true\n                    console.log(\"this test\", testingResult, \"error\")\n                }\n            })\n\n            return (\n                <div key={uuidv4()}>\n                     <MDBBtn\n                        outline\n                        color={(()=>{\n                            if(isError) {\n                                return \"danger\"\n                            } else {\n                                return \"mdb-color\"\n                            }\n                        })()}\n                        onClick={this.context.toogleShowTestManual.bind(null, id)}\n                     >\n                        {(()=>{\n                            if(isError) {\n                                return (<div>TestName: {testingResult.testingName}<strong> Error </strong>Vui Lòng Bỏ Bài Test Để Test Lại</div>)\n                            } else {\n                                return (<div>TestName: {testingResult.testingName}<strong> Pass </strong>Click Vào Đây Để Test Manual</div>)\n                            }\n                        })()}\n                     </MDBBtn>\n                     <MDBBtn\n                        outline\n                        color=\"warning\"\n                     >Bỏ Bài Test Và Test Lại</MDBBtn>\n                    {(()=>{\n                        if (testingResult.showTestManual) {\n                            return (<div>\n                                <p><strong> Bạn Hãy Mở Một Nắp Bia Giả Và Trả Lời Những Câu Hỏi Dưới Đây</strong></p>\n                                <strong>LED có Sáng Đủ Ba Màu Không Có Sáng Không ?: </strong><input type=\"checkbox\" id=\"myCheck\"></input>\n                            </div>)\n                        }\n                    })()}\n            </div>)\n        })\n    }\n}\n\nexport default ManualTest;","import React from \"react\";\n\nimport PropTypes, { bool } from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CreateBoot from \"./CreateBoot\";\nimport { AppContext, SocketIoContext } from \"./contextCreateBoot\";\nimport Qctool from \"./Components/Qctool\";\nimport SerialDisplay from \"./SerialDisplay\"\n\nimport { MDBCol, MDBRow, MDBBtn } from \"mdbreact\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport TesingResult from \"./Components/TestingResult\";\nimport ManualTest from \"./Components/ManualTest\"\n// import \n\nfunction TabContainer(props) {\n  return (\n    <Typography component=\"div\" style={{ padding: 8 * 3 }}>\n      {props.children}\n    </Typography>\n  );\n}\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper\n  }\n});\n\nclass MainApp extends React.Component {\n  static contextType = SocketIoContext;\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n      editBoot: false,\n      choosedBoot: null,\n      scenarioTestsGlobal: [],\n      openCreateBootView: false,\n      bootSocket: null,\n      hardwareInBusy: false,\n      testingResults: [],\n      connectToDeviceStatus: {\n        type: null,\n        port: null\n      },\n    };\n\n    this.notificationDOMRef = React.createRef();\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  addNotification = (title, message, type, duration) => {\n    this.notificationDOMRef.current.addNotification({\n      title: title,\n      message: message,\n      type: type,\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animated\", \"fadeIn\"],\n      animationOut: [\"animated\", \"fadeOut\"],\n      dismiss: { duration: parseInt(duration) },\n      dismissable: { click: true }\n    });\n  }\n\n  setStoreScenarioTestsToGlobal = scenarioTests => {\n    this.setState((state)=>{\n      return {\n        scenarioTestsGlobal: scenarioTests\n      }\n    })  \n  };\n\n  choosedBootHandle = (nameBoot, scenarioTests) => {\n    // Mount the new ---> let's it update store\n    console.log(\"choosed scenarioTests\", scenarioTests)\n    this.setState(state=>{\n      return {\n        choosedBoot: nameBoot,\n        scenarioTestsGlobal: scenarioTests\n      }\n    });\n  }\n\n  pushNewTestingResult = (testingResultSend) => {\n    this.setState(state=>{\n      \n      let elementNoExisted = true;\n    \n      state.testingResults.map((testingResult, id)=>{\n        if (testingResult.testingName === testingResultSend.testingName){\n          elementNoExisted = false\n          console.log(\"testingResultSend\", testingResultSend)\n          return state.testingResults[id] = testingResultSend\n        }\n      });\n\n      if (elementNoExisted) {\n        testingResultSend.showDetail=false\n        testingResultSend.showTestManual=false\n        state.testingResults.push(testingResultSend)\n      }\n\n      console.log(\"testingResults: \", state.testingResults)\n\n      return {\n          testingResults: state.testingResults\n      }\n    })\n  }\n\n  setConnectToDeviceStatus = (status) => {\n    this.setState(state=>{\n      return {\n        connectToDeviceStatus: status\n      }\n    })\n  }\n\n  setCreateBootView = (vale) => {\n    this.setState(state=>{\n      return {\n        openCreateBootView: vale \n      }\n    })\n  }\n\n  toogleShowDetailTestingResult = (testingResultIndex) => {\n    this.setState(state=>{\n      state.testingResults[testingResultIndex].showDetail ^= 1\n      return {\n        testingResults: state.testingResults\n      }\n    })\n  }\n\n  toogleShowTestManual = (testingResultIndex) => {\n    this.setState(state=>{\n      state.testingResults[testingResultIndex].showTestManual ^= 1\n      return {\n        testingResults: state.testingResults\n      }\n    })\n  }\n\n  setHardwareInBusy = (value) => {\n    this.setState(state=>{\n      return {\n        hardwareInBusy: value\n      }\n    })\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { value } = this.state;\n    console.log(\"mainApp re-render\")\n\n    return (\n      <div>\n        <AppContext.Provider\n          value={{\n            scenarioTestsGlobal: this.state.scenarioTestsGlobal,\n            setStoreScenarioTestsToGlobal: this.setStoreScenarioTestsToGlobal,\n            choosedBootHandle: this.choosedBootHandle,\n            setCreateBootView: this.setCreateBootView,\n            socketIoContext: this.context.bootSocket,\n            setHardwareInBusy: this.setHardwareInBusy,\n            hardwareInBusy: this.state.hardwareInBusy,\n            addNotification: this.addNotification,\n            testingResults: this.state.testingResults,\n            pushNewTestingResult: this.pushNewTestingResult,\n            toogleShowDetailTestingResult: this.toogleShowDetailTestingResult,\n            toogleShowTestManual: this.toogleShowTestManual,\n            setConnectToDeviceStatus: this.setConnectToDeviceStatus,\n            connectToDeviceStatus: this.state.connectToDeviceStatus\n          }}\n        >\n          <AppBar position=\"static\" style={{backgroundColor: \"#f7bc42\"}}>\n            <Tabs\n              value={value}\n              onChange={this.handleChange}\n              // indicatorColor=\"primary\"\n              textColor=\"white\"\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n            >\n              <Tab  label=\"Automation Test\" />\n              <Tab  label=\"Manual Test\" />\n              <Tab label=\"Testing Result\" />\n            </Tabs>\n          </AppBar>\n          <ReactNotification ref={this.notificationDOMRef} />\n          {(() => {\n            if (value === 0) {\n              return (\n                <TabContainer>\n                  <MDBRow>\n                    {/* <MDBCol sm=\"10\"> */}\n                      <Qctool />\n                    {/* </MDBCol> */}\n                  </MDBRow>\n                  {/* Boot */}\n                  <MDBRow>\n                    <MDBCol sm=\"12\">\n                      {(() => {\n                        if (this.state.editBoot || this.state.openCreateBootView) {\n                          return  <CreateBoot />\n                        } else {\n                          if (this.state.choosedBoot) {\n                            return (\n                              <MDBBtn\n                                color=\"mdb-color\"\n                                outline\n                                onClick={() => {\n                                  this.setState(state => {\n                                    return {\n                                      editBoot: true\n                                    };\n                                  });\n                                }}\n                                style={{ width: \"100%\" }}\n                              >\n                                Choosed Boot: {this.state.choosedBoot}.{\" \"}\n                                <b>Would You Like To Edit Boot ?</b>\n                              </MDBBtn>\n                            );\n                          } else {\n                            return (\n                              <MDBBtn\n                                color=\"mdb-color\"\n                                outline\n                                onClick={() => {\n                                  this.setState(state => {\n                                    return {\n                                      editBoot: true\n                                    };\n                                  });\n                                }}\n                                style={{ width: \"100%\", marginTop: 20 }}\n                              >\n                                <b> Create Boot ? </b>\n                              </MDBBtn>\n                            );\n                          }\n                        }\n                      })()}\n                    </MDBCol>\n                    <MDBCol>{/* debug */}</MDBCol>\n                  </MDBRow>\n                </TabContainer>\n              );\n            } else if (value === 1) {\n              return (\n                <>\n                  <TabContainer> <ManualTest /></TabContainer>\n                </>\n              );\n            } else if (value === 2) {\n              return (<TabContainer> <TesingResult /></TabContainer>);\n            }\n          })()}\n          {/* <SerialDisplay /> */}\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n\nMainApp.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MainApp);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(4),\n    outline: 'none',\n  },\n}));\n\nfunction SimpleModal() {\n  const [open, setOpen] = React.useState(false);\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = React.useState(getModalStyle);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Typography gutterBottom>Click to get the full Modal experience!</Typography>\n      <Button onClick={handleOpen}>Open Modal</Button>\n      <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={open}\n        onClose={handleClose}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <Typography variant=\"h6\" id=\"modal-title\">\n            Text in a modal\n          </Typography>\n          <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n          <SimpleModal />\n        </div>\n      </Modal>\n    </div>\n  );\n}\n\nexport default SimpleModal;","import React, { useState, useEffect, useContext } from 'react';\nimport { SocketIoContext } from './contextCreateBoot'\n\nimport uuidv4 from './utility'\n\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\n// import { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport TesingResult from './Components/TestingResult';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ClickAwayListener } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Modal from '@material-ui/core/Modal';\nimport ModalTest from './Test/Modal';\n\n// const theme = createMuiTheme({}) \n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n  }\n  \n  function getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme=>({\n    root: {\n        // display: 'flex'\n        flexGrow: 1,\n    },\n\n    wrapper: {\n        position: \"relative\",\n        margin: theme.spacing(1),\n    },\n\n    Toolbar: {\n        display: \"flex\",\n        justifyContent: 'space-between',\n        alignItems: 'flex-start',\n        padding: \"24px\"\n    },\n\n    cirlcularProcess: {\n        marginLeft: \"24px\"\n    },\n\n    efuseConfig: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignContent: 'flex-end'\n    },\n\n    startAllTestingButton: { \n        marginLeft: \"auto\",\n        width: \"30%\",\n    },\n\n    timeTest: {\n        marginLeft: \"20px\",\n        marginRight: \"24px\"\n    },\n\n    devicesFailNum: {\n        marginLeft: \"60px\",\n        marginRight: \"24px\"\n    },\n\n    testingDeviceCards: {\n        marginTop: \"24px\",\n        paddingRight: \"24px\",\n        display: 'flex',\n        flexGrow: 1,  \n        flexDirection: 'column',\n        // without height property justify content can't working\n        // justifyContent: 'space-between',\n        // height: \"500px\"\n    },\n\n    card: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: '#f5f5f5'\n    },\n\n    contentsInCard: {\n        display: 'flex',\n        // marginTop: \"10px\",\n        padding: \"10px\",\n        // width: \"1000px\"\n        justifyContent: 'space-between',\n    },\n\n    detailContentCard: {\n        marginLeft: \"10px\",\n        display: 'flex',\n        padding: theme.spacing(3, 2),\n        flexDirection: 'column'\n    },\n\n    detailContentCardFull: {\n        marginLeft: \"10px\",\n        display: 'flex',\n        flexGrow: 1,\n        padding: theme.spacing(3, 2),\n        flexDirection: 'column'\n    },\n\n    attributeTestingDeviceTitle: {\n\n    },\n\n    attributeTestingDeviceValue: {\n\n    },\n    detailInfoModal: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        justifyItems: \"center\",\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(4),\n        outline: 'none',\n      },\n      \n      serialDataInModal: {\n          height: \"300px\",\n          overflowY: 'scroll'\n      },\n\n      closeModalButton: {\n          display: \"flex\",\n          backgroundColor: \"#2196f3\"\n      }\n}));\n\nconst AutomaticTest = (props) => {\n    const classes = useStyles();\n    const bootSocketContext = useContext(SocketIoContext)\n    \n    const TESTING_STATUS = {\n        IN_WAITING: 1,\n        IN_TESTING: 2,\n        TESTING_FAIL: 3,\n        DEVICE_BROKEN: 4,\n        TESTING_PASS: 5,\n    }\n\n    const testingStatusToString = (testingStatus) => {\n        if (testingStatus === TESTING_STATUS.IN_WAITING) {\n            return \"Waiting...\"\n        } else if (testingStatus === TESTING_STATUS.IN_TESTING) {\n            return \"In Testing....\"\n        } else if (testingStatus === TESTING_STATUS.TESTING_FAIL) {\n            return \"Testing Fail\"\n        } else if (testingStatus === TESTING_STATUS.TESTING_PASS) {\n            return \"Testing Pass\"\n        } else if (testingStatus === TESTING_STATUS.DEVICE_BROKEN) {\n            return \"Device Broken\"\n        }\n    }\n\n    const [testingDevices, setTestingDevices] = useState([])\n\n    const [efuseConfig, setEfuseConfig] = useState({\n        model: '',\n        productionVersion: '',\n        productionLine: ''\n    })\n\n    const [openModal, setOpenModal] = useState(false)\n\n    const [onTestingProcessRunning, setOnTestingProcessRunning] = useState(false)\n\n    const [inCheckingDetailDevice, setIncheckingDetailDevice] = useState({\n                                                                    serialData: '',\n                                                                    scenarioTestingRunning: {\n\n                                                                    }\n                                                                })    \n\n    const [testingTimer, setTestingTimer] = useState(null)\n\n    const [devicesFailNum, setDevicesFailNum] = useState(0)\n\n    const [timeTestingRunning, setTimeTestingRunning] = useState(0)\n\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const [notificationDOMRef] = useState(React.createRef())\n\n    const addNotification = (title, message, type, duration) => {\n        notificationDOMRef.current.addNotification({\n        title: title,\n        message: message,\n        type: type,\n        insert: \"top\",\n        container: \"top-right\",\n        animationIn: [\"animated\", \"fadeIn\"],\n        animationOut: [\"animated\", \"fadeOut\"],\n        dismiss: { duration: parseInt(duration) },\n        dismissable: { click: true }\n        });\n    }\n\n    //eqivalent componentDidMound \n    useEffect(()=>{\n        bootSocketContext.bootSocket.emit(\"runAutomaticFactoryQcTool\")\n\n        bootSocketContext.bootSocket.on('disconnect', ()=>{\n            console.log('disconnect')\n            addNotification('Connect To Server Status', 'disconnected', 'danger', '20000')\n            // refesh page\n        })\n\n        bootSocketContext.bootSocket.on('reconnect_attempt', ()=>{\n            console.log('on socket reconnect_attempt')\n            addNotification('Connect To Server Status', 'try reconnect', 'danger', '20000')\n        })\n\n        bootSocketContext.bootSocket.on(\"efuseConfig\", efuseConfig=>{\n            setEfuseConfig(efuseConfig)\n        })\n\n        bootSocketContext.bootSocket.on(\"pushNotification\", ms=>{\n            addNotification(ms.title, ms.message, ms.type, ms.duration)\n        })\n\n        bootSocketContext.bootSocket.on(\"testingRunningStatus\", d => {\n            setTestingDevices(d)\n        })\n\n        bootSocketContext.bootSocket.on(\"onTestingProcessRunning\", d => {\n            if (d === true) {\n                setTimeTestingRunning(0)\n                \n                setTestingTimer(setInterval(() => {\n                    console.log(\"testing timer in running.....\")\n                    setTimeTestingRunning(timeTestingRunning=>{\n                        setTimeTestingRunning(timeTestingRunning+1)\n                    })\n                }, 1000))\n            } else {\n                setTestingTimer(testingTimer=>{\n                    clearInterval(testingTimer)\n                })\n            }\n\n            setOnTestingProcessRunning(d)\n            console.log(\"setOnTestingProcessRunning: \", d)\n        })\n        \n        // equivalent componentUnmount\n        return () => {\n\n        }\n\n    }, [])\n\n    // make inCheckingDetailDevice change a long with testingDevices\n    useEffect(()=>{\n        let inTestingDevice = testingDevices.find(device=> (device.testingStatus === TESTING_STATUS.IN_TESTING))\n        if (inTestingDevice) setIncheckingDetailDevice(inTestingDevice)\n    }, [testingDevices])\n\n    const renderEfuseConfig = (\n            <ul className={classes.efuseConfig}>\n                <Typography variant=\"h6\">\n                    Efuse Config\n                </Typography>\n                \n                {(()=>{\n                    return Object.keys(efuseConfig).map(key=>{\n                        return (\n                            <li key={uuidv4()}> \n                                <Typography>{key}: {efuseConfig[key]}</Typography>\n                            </li>)\n                })\n                })()}\n            </ul>\n    )\n    \n    const renderNavBar = (\n    <AppBar color='default' position=\"static\">\n        <Toolbar className={classes.Toolbar}> \n            {renderEfuseConfig}\n\n            <div className={classes.startAllTestingButton}>\n                <Button \n                    disabled={onTestingProcessRunning || !testingDevices.find(d=>(d.testingStatus === TESTING_STATUS.IN_WAITING))}\n                    variant=\"contained\" color=\"primary\"\n                    onClick={()=>{\n                        bootSocketContext.bootSocket.emit(\"startTest\", '')\n                    }}\n                    style={{backgroundColor: \"#2196f3\"}}\n                >\n                    {onTestingProcessRunning ? <div>Testing Running... <CircularProgress size={20} className={classes.cirlcularProcess} /></div> : \"Test All Devices\"}\n                </Button>\n                {/* <CircularProgress className={classes.cirlcularProcess} /> */}\n                {/* {onTestingProcessRunning && <CircularProgress className={classes.cirlcularProcess} />} */}\n            </div>\n                \n            {/* <Typography variant=\"h6\" className={classes.timeTest}>Time Testing Running: {timeTestingRunning}</Typography> */}\n            \n            <Typography variant=\"h6\" className={classes.devicesFailNum}>Num device Fail: {devicesFailNum}</Typography>\n        </Toolbar>\n    </AppBar>)\n\n    const renderContentCard = (content) => {\n        let thisBackgroundColor = ''\n                if (content.testingStatus === TESTING_STATUS.IN_TESTING) {\n                    thisBackgroundColor = \"#fffa00\"\n                } else if (content.testingStatus === TESTING_STATUS.TESTING_PASS) {\n                    thisBackgroundColor = \"#42f545\"\n                } else if ((content.testingStatus === TESTING_STATUS.TESTING_FAIL) || (content.testingStatus === TESTING_STATUS.DEVICE_BROKEN)) {\n                    thisBackgroundColor = \"#ea450e\"\n                }\n        return (\n            // render content card\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    backgroundColor: thisBackgroundColor,\n                    marginTop: \"10px\"\n                }}>\n                    {content.testingStatus === TESTING_STATUS.IN_TESTING ? <LinearProgress /> : null}\n                    <div className={classes.contentsInCard}>\n                        {/* render title and value  */}\n                        {(()=>{\n                            return Object.keys(content).map(key=>{\n                                if(key===\"serialPort\") {\n                                    return (\n                                        <Paper className={classes.detailContentCardFull}>\n                                            <Typography variant=\"h6\"  className={classes.attributeTestingDeviceTitle}>Device At Port</Typography>\n                                            <Typography variant=\"subtile1\"  className={classes.attributeTestingDeviceValue}>{content[key]}</Typography>\n                                        </Paper>\n                                    )\n                                } else if (key === \"key\" || key==\"serialData\") {\n                                    return\n                                } \n                                else if (key===\"macAddress\") {\n                                    return (\n                                        <Paper className={classes.detailContentCardFull}>\n                                            <Typography variant=\"h6\"  className={classes.attributeTestingDeviceTitle}>{key}</Typography>\n                                            <Typography variant=\"subtile1\"  className={classes.attributeTestingDeviceValue}>{content[key]}</Typography>\n                                        </Paper>\n                                    )\n                                }  else if (key === \"timeTestingRunning\") {\n                                    return (\n                                        <Paper className={classes.detailContentCard}>\n                                            <Typography variant=\"h6\"  className={classes.attributeTestingDeviceTitle}>Time Count</Typography>\n                                            <Typography variant=\"subtile1\"  className={classes.attributeTestingDeviceValue}>{content[key].toString()}</Typography>\n                                        </Paper>\n                                    )\n                                }\n                                else if (key===\"testingStatus\") {\n                                    return (\n                                        <Paper className={classes.detailContentCard}>\n                                            <Typography variant=\"h6\"  className={classes.attributeTestingDeviceTitle}>Status</Typography>\n                                            <div>\n                                                <Typography variant=\"subtile1\"  className={classes.attributeTestingDeviceValue}>{testingStatusToString(content[key])}</Typography>    \n                                                <Button \n                                                    color=\"primary\"\n                                                    onClick={()=>{\n                                                        setOpenModal(true)\n                                                    }}\n                                                >\n                                                    See Detail Running\n                                                </Button>\n                                            </div>\n                                        </Paper>\n                                    )\n                                } else { // default\n                                    return (\n                                        <Paper className={classes.detailContentCard}>\n                                            <Typography variant=\"h6\"  className={classes.attributeTestingDeviceTitle}>{key}</Typography>\n                                            <Typography variant=\"subtile1\"  className={classes.attributeTestingDeviceValue}>{content[key]}</Typography>\n                                        </Paper>\n                                    )    \n                                }        \n                            })\n                        })()}\n                    </div>\n                </div>\n            )\n    }\n\n    const renderDeviceCard = (\n        <div className={classes.testingDeviceCards}>\n                {   \n                    (()=>{\n                        // console.log(\"testingDevices: \", testingDevices)\n                        return  testingDevices.map(d => {\n                            return  renderContentCard(d)\n                        })\n                    })()\n                } \n            </div>\n    )\n\n    const renderDetailInfoModal = (\n        <Modal\n            open={openModal}\n            onClose={()=>{\n                setOpenModal(false)\n            }}\n        >   \n            <div className={classes.detailInfoModal}>\n                <Typography variant=\"h6\" id=\"modal-title\">\n                    Serial Data\n                </Typography>\n                <textarea \n                    className={classes.serialDataInModal}\n                    value={inCheckingDetailDevice.serialData}\n                />\n                <div> \n                    <Button \n                        className={classes.closeModalButton}\n                        onClick={()=>{setOpenModal(false)}}\n                    >   \n                        Close Modal\n                    </Button> \n                </div>\n            </div>\n\n            \n        </Modal>\n    )\n\n    const renderBody = (\n        <div>\n            {renderDeviceCard}\n        </div>\n    )\n\n    return (\n        <div className={classes.root}>  \n            <CssBaseline />\n            {renderNavBar}\n            <ReactNotification ref={notificationDOMRef} />\n            {renderBody}\n            {/* </Test> */}\n            {renderDetailInfoModal}\n        </div>\n    )\n}\n\nexport default AutomaticTest","import React from \"react\"\nimport {SocketIoContext} from \"./contextCreateBoot\"\n\nimport uuidv4 from \"./utility\"\n\nimport axios from \"axios\";\n\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, \n    MDBCardText, MDBCol, MDBBtnGroup, MDBRow, \n    MDBDropdownMenu, MDBDropdownItem,MDBDropdown,MDBInput,\n    MDBListGroup,\n    MDBListGroupItem,MDBNavItem,MDBNavbarNav,\n    MDBDropdownToggle,\n    MDBBadge,MDBView,MDBNavbar,\n    MDBMask,\n    CardTitle,\n    MDBIcon} from 'mdbreact';\n\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\n\nimport SerialDisplay from \"./SerialDisplay\";\nvar styleCardTittle={\n        background: \"inherit\",\n        backgroundColor: \"rgba(215, 211, 204, 1)\",\n        // height:\"90px\"\n}\n\nclass QctoolFactory extends React.Component {\n    static contextType = SocketIoContext\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            boxInfos: [\n                {\n                    infoName: \"efuse\",\n                    key: uuidv4(),\n                    extractedData: null,\n                    queryDataCommand: null \n                },\n                {\n                    infoName: \"date\",\n                    key: uuidv4(),\n                    extractedData: null,\n                    queryDataCommand: null\n                },\n                {\n                    infoName: \"pvc\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n                {\n                    infoName: \"mech_rev\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n                {\n                    infoName: \"el_rev\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n                {\n                    infoName: \"year\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n                {\n                    infoName: \"week\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n                {\n                    infoName: \"mac\",\n                    key: uuidv4(),\n                    extractedData: null\n                },\n            ],\n\n            productAssemblyTest: [\n                {\n                    infoName: \"Send Key\",\n                    name: 'sendKey',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Hãy Bấm User Button\",\n                    name: 'testUserButton',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    restTestingTime: null,\n                    inTesting: false\n                },\n                {\n                    infoName: \"Hãy Chích Reset Button\",\n                    name: 'testResetButton',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Check Wifi Connection\",\n                    name: 'checkWifiConnection',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    restTestingTime: null,\n                    inTesting: false\n                },\n                {\n                    infoName: \"Led Hiển Thị Đủ 7 màu không ? (Trả Lời Tại Q1) )\",\n                    name: 'testRGBLed',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [\"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Hãy Mở Một Nắp Giả\",\n                    name: 'testOpenFakeCap',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Chất Lượng Ảnh Có Đạt Tiêu Chuẩn Không ?(Trả Lời Ở Q2)\",\n                    name: 'confirmImageQuality',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [\"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Hall Sensor Hoạt Động Tốt\",\n                    name: 'checkHallSensor',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Battery Hoạt Động Tốt\",\n                    name: 'checkBattery',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"in charging current: \"],\n                    extractStringRegexQueries: ['/d{1,4}'],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                {\n                    infoName: \"Check Update OTA\",\n                    name: 'checkOTASuccess',\n                    key: uuidv4(),\n                    extractedData: null,\n                    findLogContainSubString: [ \"user button pressed\"],\n                    extractStringRegexQueries: [],\n                    testingResult: null, \n                    timeoutError: 3000,\n                    inTesting: false,\n                    restTestingTime: null\n                },\n                // {\n                //     infoName: \"Change To URL Default\",\n                //     name: 'changeToUrlDefault',\n                //     key: uuidv4(),\n                //     extractedData: null,\n                //     findLogContainSubString: [ \"user button pressed\"],\n                //     extractStringRegexQueries: [],\n                //     testingResult: null, \n                //     timeoutError: 3000,\n                //     inTesting: false,\n                //     restTestingTime: null\n                // }\n            ],\n\n            confirmQuestions: [\n                {   \n                    question: \"Led Có Hiển Thị Được 7 Màu Không?\",\n                    type: 'confirmRGBLedQuality',\n                    key: uuidv4(),\n                    answer: null\n                },\n                {   \n                    questionType: \"img\",\n                    type: 'confirmImageQuality',\n                    question: \"Bức Hình Dưới Đây Có Đạt Tiểu Chuẩn Không ?\",\n                    key: uuidv4(),\n                    imgUrl: null,\n                    answer: null\n                }\n            ],\n\n            devicesTestingStack: [],\n\n            theBoot: null,\n\n            bootName: null,\n\n            inTestingDeviceStatus: {\n                macAddress: null,\n                key: uuidv4(),\n                serialPort: null,\n                testedDevicesNum: null,\n                failtNum: null,\n                efuse: null,\n                batteryLevel: null,\n                nameDeviceFail: [] \n            },\n\n            chooseModeTestingButton: {\n                automationTest: false,\n                manualTest: true,\n                key: uuidv4()\n            },\n\n            automaticTestingResult: {\n                key: uuidv4(),\n                scenarioTestResults: null,\n                bootName: null,\n                date: null,\n                isAutomaticTestingPass: null\n            },\n\n            manualTestingResult: {\n                key: uuidv4(),\n                data: null,\n                dayTest: null,\n                result: null\n            },\n\n            efuseSetup: {\n                key:uuidv4(),\n                model: null,\n                production_line: null,\n                version_code: null  \n            },\n\n            automationTest: [],\n            \n            deviceBroken: false,\n\n            hardwareBusy: false,\n\n            waitingForSetRetestResult: false,\n\n            shouldPreventTestManual: {\n                status: null,\n                reason: null\n            }\n        }\n\n\n\n        this.notificationDOMRef = React.createRef();\n    }\n\n    renderBoxInfos = () => {\n        return (\n            <MDBCard style={{marginTop: \"20px\"}}>\n                <MDBCardBody>\n                    <MDBCardTitle style={styleCardTittle} >Thông Tin Thiết Bị</MDBCardTitle>\n                    <MDBListGroup>\n                        {(()=>{\n                            return this.state.boxInfos.map(info=>{\n                                return (\n                                    <MDBListGroupItem key={info.key} style={{marginTop: \"10px\"}}>\n                                        <MDBRow>\n                                            <MDBCol><h5>{info.infoName}: </h5></MDBCol>\n                                            <MDBCol align=\"center\" style={{width: \"100%\"}}> {info.extractedData}</MDBCol>\n                                        </MDBRow>\n                                    </MDBListGroupItem>\n                                )\n                            })\n                        })()}\n                    </MDBListGroup>\n                </MDBCardBody>\n            </MDBCard>\n        )   \n    }\n\n    renderEfuseInBox = () => (<div>\n                                <h4>Efuse In Device: </h4> {this.state.boxInfos.efuse}\n                            </div>)\n\n    addNotification = (title, message, type, duration) => {\n        this.notificationDOMRef.current.addNotification({\n          title: title,\n          message: message,\n          type: type,\n          insert: \"top\",\n          container: \"top-right\",\n          animationIn: [\"animated\", \"fadeIn\"],\n          animationOut: [\"animated\", \"fadeOut\"],\n          dismiss: { duration: parseInt(duration) },\n          dismissable: { click: true }\n        });\n      }\n\n    renderAutomaticTestingResult = () => {\n        return (\n        <MDBCard style={{marginTop: \"20px\"}}>\n            <MDBCardBody>\n                <MDBCardTitle>\n                    Automatic Testing Result <br/>\n                    MacAddress: {this.state.automaticTestingResult.macAddress}<br/>\n                    Day Test: {this.state.automaticTestingResult.date.toString()} <br/>\n                    Testing Time: {this.state.automaticTestingResult.testingTime}\n                </MDBCardTitle>\n                <MDBListGroup>\n                    {(()=>{\n                        return this.state.automaticTestingResult.scenarioTestResults.map(r=>{\n                            return (\n                                <MDBListGroupItem style={{marginBottom: \"10px\"}} \n                                color={r.result ? \"success\" : \"danger\"}\n                                >\n                                    <MDBCol>{r.name}</MDBCol>\n                                    <MDBCol align=\"right\" style={{width:\"100%\"}}>\n                                        {(()=>{\n                                            if (r.result) {\n                                                return <MDBBadge color=\"success\">PASS</MDBBadge> \n                                            } else {\n                                                return <MDBBadge color=\"danger\">FAIL</MDBBadge>\n                                            }\n                                        })()}\n                                    </MDBCol>\n                                </MDBListGroupItem>\n                            )\n                        })\n                    })()}\n                </MDBListGroup>\n                <hr />\n                {(()=>{\n                    if(this.state.automaticTestingResult.scenarioTestResults.length>0) {\n                        return (\n                            <MDBBadge \n                                color={(()=>{\n                                    if (this.state.automaticTestingResult.isAutomaticTestingPass) {\n                                        return \"success\"\n                                    } else if (this.state.automaticTestingResult.isAutomaticTestingPass === false) {\n                                        return \"danger\"\n                                    }\n                            })()} \n                            style={{width:\"100%\"}}> \n                                <h5> Kết Quả: \n                                    {this.state.automaticTestingResult.isAutomaticTestingPass ? <>PASS</> : <>FAIL</>}\n                                </h5>\n                            </MDBBadge>\n                        )\n                    }\n                })()}\n            </MDBCardBody>\n        </MDBCard>)\n    }\n\n    renderManualTestingResult = () => {\n        return (\n            <MDBCard style={{marginTop: \"20px\"}}>\n            <MDBCardBody>\n                <MDBCardTitle>\n                    Product Assembly Test Result<br/>\n                    DayTest: {this.state.manualTestingResult.dayTest} <br />\n                    TestingTime: {this.state.manualTestingResult.testingTime}\n                </MDBCardTitle>\n                <MDBListGroup>\n                    {(()=>{\n                        return this.state.manualTestingResult.data.map(d=>{\n                            // console.log(\"this.state.manualTestingResult: \", this.state.manualTestingResult)\n                            return (\n                                <MDBListGroupItem color={d.result ? \"success\" : \"danger\"}>\n                                    <MDBRow>\n                                        <MDBCol md=\"10\">{d.infoName}</MDBCol>\n                                        <MDBCol align=\"right\">            \n                                                    {(()=>{\n                                                        if (d.result) {\n                                                        return <MDBBadge color=\"success\">PASS</MDBBadge> \n                                                    } else {\n                                                        return <MDBBadge color=\"danger\">FAIL</MDBBadge>\n                                                    }\n                                                    })()}\n                                        </MDBCol>\n                                    </MDBRow>\n                                </MDBListGroupItem>\n                            )\n                        })\n                    })()}\n                </MDBListGroup> \n                <hr /> \n                <MDBBadge color={this.state.manualTestingResult.result ? \"success\" : \"danger\"} style={{width:\"100%\"}}>\n                    <h5>Kết Quả: {this.state.manualTestingResult.result ? <>PASS</> : <>FAIL</>}</h5>\n                </MDBBadge>\n            </MDBCardBody>\n            </MDBCard>\n        )\n    }\n\n    renderAutomaticTesting = () => {\n        return (\n            <MDBCard style={{marginTop: \"20px\"}}>\n                <MDBCardBody>\n                    <MDBCardTitle style={styleCardTittle}>PCB Automatic Test</MDBCardTitle>\n                    <MDBListGroup>\n                    {(()=>{\n                        return this.state.automationTest.map(test=>{\n                            if (test.inTesting) {\n                                return (\n                                    <MDBListGroupItem   \n                                    style={{backgroundColor: \"red\"}}\n                                    key={test.key}> \n                                        <h4 align=\"center\"> In Testing... </h4>\n                                    </MDBListGroupItem>\n                                )\n                            } else {\n                                return (\n                                    <MDBListGroupItem  \n                                    color={(()=>{\n                                        if(!test.result) {\n                                            return \"warning\"\n                                        } else {\n                                            return \"success\"\n                                        }\n                                    })()} \n                                    style={{}}\n                                    key={test.key}> \n                                    <MDBRow>\n                                        <MDBCol>{test.name}</MDBCol>\n                                        <MDBCol align=\"right\" style={{width:\"100%\"}}>\n                                            {(()=>{\n                                                    if(test.result===true){\n                                                        return <MDBBadge color=\"success\">PASS</MDBBadge>\n                                                    } else if (test.result===false) {\n                                                        return <MDBBadge color=\"danger\">FAIL</MDBBadge>\n                                                    }\n                                                })()}\n                                        </MDBCol>\n                                    </MDBRow> \n                                    </MDBListGroupItem>\n                                )\n                            }\n                        })\n                    })()}\n                    </MDBListGroup>\n                    <hr />\n                    {(()=>{\n                        for(let i of this.state.automationTest) {\n                            let isTestingDone = true\n                            this.state.automationTest.map(t=>{\n                                if (t.result===null) {\n                                    isTestingDone = false\n                                }\n                            })\n\n                            if (!isTestingDone) {\n                                return\n                            }\n\n                            if(i.result === false) {\n                                return <MDBBadge color=\"danger\" style={{width:\"100%\"}}> <h5> Kết Quả: Fail</h5> </MDBBadge>\n                            }\n                        }\n                        return <MDBBadge color=\"success\" style={{width:\"100%\"}}> <h5>Kết Quả: Pass</h5> </MDBBadge>\n                    })()}\n                </MDBCardBody>\n            </MDBCard>        \n            )\n    }\n\n    renderDevicesList = () => {\n        return (\n            <MDBDropdown>    \n                <MDBDropdownToggle\n                    outline\n                    color=\"mdb-color\"\n                    icon=\"caret-down\"\n                >\n                    {this.state.devicesTestingStack.length} :Devices Waiting For Test\n                </MDBDropdownToggle>  \n                <MDBDropdownMenu>    \n                {(()=>{\n                    return this.state.devicesTestingStack.map(devicePort=>{\n                        return <MDBDropdownItem>{devicePort}</MDBDropdownItem>\n                    })\n                })()}\n                </MDBDropdownMenu>\n            </MDBDropdown>\n            \n        )\n    }\n\n    renderInTestingDeviceStatus = () => {\n        return (\n            <div\n            >\n                Device in Testing: <MDBBadge color=\"success\">{this.state.inTestingDeviceStatus.macAddress}</MDBBadge><br/>  \n                Port: <MDBBadge color={!this.state.inTestingDeviceStatus.deviceBroken ? \"success\" : \"danger\"}>{this.state.inTestingDeviceStatus.serialPort}</MDBBadge><br/>\n                Efuse In Device: <MDBBadge color=\"success\">{this.state.inTestingDeviceStatus.efuse}</MDBBadge> \n                <nbsp /> <nbsp /><nbsp /><nbsp /><nbsp /><nbsp />\n                Battery Level: <MDBBadge color=\"success\">{this.state.inTestingDeviceStatus.batteryLevel} mV</MDBBadge>\n            </div>\n        )\n    }\n\n    renderChooseModeTestingButton = () => {\n        return (\n            <>\n            <MDBDropdown>\n                <MDBDropdownToggle\n                    outline={true.toString()}\n                    color=\"mdb-color\"\n                    nav caret\n                >\n                    Choose Mode Testing\n                </MDBDropdownToggle>\n                <MDBDropdownMenu>\n                    <MDBDropdownItem\n                        onClick={()=>{\n                            this.context.bootSocket.emit(\"setQctoolForProductionTestMode\", \"automaticTestMode\")\n                            \n                            this.setState(state=>{\n                                state.chooseModeTestingButton.automationTest = true\n                                state.chooseModeTestingButton.manualTest = false\n                                return {\n                                    chooseModeTestingButton: state.chooseModeTestingButton\n                                }\n                            })\n                        }}\n\n                    >\n                        Automation Test\n                    </MDBDropdownItem>\n                    <MDBDropdownItem\n                        onClick={()=>{\n                            this.context.bootSocket.emit(\"setQctoolForProductionTestMode\", \"manualTestMode\")\n                            this.setState(state=>{\n                                state.chooseModeTestingButton.automationTest = false\n                                state.chooseModeTestingButton.manualTest = true\n                                return {\n                                    chooseModeTestingButton: state.chooseModeTestingButton\n                                }\n                            })\n                        }}\n                    >\n                        Manual Test\n                    </MDBDropdownItem>\n                </MDBDropdownMenu>\n            </MDBDropdown> \n            <MDBBtn         \n                disabled={this.state.hardwareBusy ? true : false}\n                color=\"mdb-color\"\n                onClick={\n                    ()=>{\n                        if(this.state.chooseModeTestingButton.automationTest) {\n                            this.context.bootSocket.emit(\"runAutomaticTest\", {\n                                scenarioTests: this.state.theBoot,\n                                bootName: this.state.bootName\n                            })\n                        } else {\n                            this.context.bootSocket.emit(\"runManualTest\", this.state.productAssemblyTest)\n                        }\n                    }\n                }\n            >\n                {(()=>{\n                    if(this.state.chooseModeTestingButton.automationTest) {\n                        return <>Run Automation Test</>\n                    } else {\n                        return <>Run Manual Test</>\n                    }\n                })()}                \n            </MDBBtn>\n            <MDBBtn\n                outline\n                color=\"warning\"\n                disabled={this.state.waitingForSetRetestResult}\n                onClick={()=>{\n\n                    this.setState(state=>{\n                        return {\n                            waitingForSetRetestResult: true\n                        }\n                    })\n\n                    axios.get(`/api/reTest?macAddress=${this.state.inTestingDeviceStatus.macAddress}`).then(d=>{\n                        if(d.status === 200) {\n                            console.log(\"ReTest SuccessFull: \", d)\n                            this.setState(state=>{\n                                state.automaticTestingResult.scenarioTestResults = null\n                                state.manualTestingResult.data = null\n                                return {\n                                    automaticTestingResult: state.automaticTestingResult,\n                                    manualTestingResult: state.manualTestingResult\n                                }\n                            })\n                        }\n                    })\n                    .catch(err=>{console.log(err)})\n                    .finally(()=>{\n                        console.log(\"set waitingForTestingResult to false\")\n                        this.setState(state=>{\n                            return {\n                                waitingForSetRetestResult: false\n                            }\n                        })\n                    })\n                }}\n            >\n                Re-Test\n            </MDBBtn>\n            </>\n        )\n    }\n\n    renderManualTesting = () => {\n        return (\n            <MDBCard style={{marginTop: \"20px\"}}>\n                <MDBCardBody>\n                <MDBCardTitle style={styleCardTittle} >Product Assembly Test <br/> (Thực Hiện Mục Dưới Đây Và Trả Lời Câu Hỏi Ở Mục <strong>Confirm Questions</strong>)</MDBCardTitle>\n                <MDBListGroup>\n                    {(()=>{\n                        return this.state.productAssemblyTest.map(info=>{\n                            if (info.inTesting) {\n                                return (\n                                    <MDBListGroupItem style={{backgroundColor: \"red\"}}>\n                                        <h4 className=\"white-text\">\n                                            {info.infoName}\n                                        \n                                            {((info.name === \"checkOTASuccess\") || (info.name === \"changeToUrlDefault\")|| (info.name === \"checkWifiConnection\")||(info.name === \"sendKey\")) \n                                                    ? <strong> Hãy Chờ Chúng Tôi {info.infoName}: {Math.floor(parseInt(info.restTestingTime)/1000)} S</strong> \n                                                    : <strong> Nhanh Lên Bạn Còn Lại: {Math.floor(parseInt(info.restTestingTime)/1000)} S\n                                        </strong>} \n                                        </h4>\n                                    </MDBListGroupItem>\n                                )\n                            } else if (info.testingResult !== null) {\n                                return (\n                                    <MDBListGroupItem\n                                    color={info.testingResult ? \"success\" : \"danger\"}\n                                    >\n                                     <MDBRow>\n                                        <MDBCol>{info.infoName}</MDBCol>\n                                        <MDBCol align=\"right\" style={{width:\"100%\"}}>\n                                            {(()=>{\n                                                if(info.inTesting) {\n                                                    // return <MDBBadge color=\"warning\">  In Testing.... TIMEOUT ERROR: {info.restTestingTime} </MDBBadge>\n                                                } else if ((info.testingResult === false) && !info.inTesting) {\n                                                    return <MDBBadge color=\"danger\"> FAIL </MDBBadge>\n                                                } else if (info.testingResult === true) {\n                                                    return <MDBBadge color=\"success\"> PASS </MDBBadge>\n                                                }\n                                            })()}\n                                        </MDBCol>\n                                    </MDBRow>\n                                    </MDBListGroupItem>\n                                ) \n                            } else {\n                                return (\n                                    <MDBListGroupItem color=\"warning\">\n                                        {info.infoName}\n                                    </MDBListGroupItem>\n                                )\n                            }\n                        })\n                    })()}\n                </MDBListGroup>\n                <hr/>\n                {(()=>{\n                    let isTestingDone = true\n                    this.state.productAssemblyTest.map(i=>{\n                        if (i.testingResult === null) {\n                            return isTestingDone = false\n                        }\n                    })\n\n                    if (!isTestingDone) {\n                        return\n                    }\n\n                    let isTestingFail = this.state.productAssemblyTest.find(i=> (i.testingResult === false))\n\n                    if (isTestingFail) {\n                        return <MDBBadge color=\"danger\" style={{width:\"100%\"}}><h5>Kết Quả: Fail</h5></MDBBadge>\n                    } else {\n                        return <MDBBadge color=\"success\" style={{width:\"100%\"}}><h5>Kết Quả: Pass</h5></MDBBadge>\n                    }\n                })()}     \n                </MDBCardBody>\n            </MDBCard>\n        )\n    }\n\n    testerAnswerConfirmQuestion = (currentQuest, answer) => {\n        this.setState(state=>{\n            let confirmQuestions = state.confirmQuestions.map(confirmQuestion=>{\n                if(confirmQuestion.question === currentQuest.question){\n                    console.log(\"user choose confirmQuestion.question: \", confirmQuestion.question)\n                    confirmQuestion.answer = answer\n                }\n\n                return confirmQuestion\n            })\n\n            return {\n                confirmQuestions: confirmQuestions\n            }\n        });\n\n        this.context.bootSocket.emit(\"userConfirmQuestion\", {\n            type: currentQuest.type,\n            answer: answer\n        })\n    }\n\n    renderConfirmQuestions = () => {\n        return (\n            <MDBCard style={{marginTop: \"20px\"}}>\n                <MDBCardBody>\n                    <MDBCardTitle style={styleCardTittle} >Confirm Questions</MDBCardTitle>\n                        <MDBListGroup>\n                            {(()=>{\n                                return this.state.confirmQuestions.map(q=>{\n                                    if (q.questionType !== \"img\") {\n                                        return (\n                                            <MDBListGroupItem style={{marginBottom: \"10px\"}} key={q.key} color=\"warning\">\n                                                <strong>Q1: </strong>{q.question} <br />\n                                                    <div style={{display: \"flex\"}}>\n                                                        <div>\n                                                            Có: <input type=\"checkbox\" style={{transform : \"scale(1.6)\", marginLeft: \"10px\"}}\n                                                                            checked={q.answer}\n                                                                            disabled={!this.state.productAssemblyTest.find(r=>(r.inTesting == true && r.name == 'testRGBLed'))}\n                                                                            onChange={this.testerAnswerConfirmQuestion.bind(null, q, true)}\n                                                                    />\n                                                        </div>\n                                                        <div style={{marginLeft:\"50px\"}}>\n                                                            Không: <input type=\"checkbox\" \n                                                                        style={{marginLeft:\"10px\",  transform : \"scale(1.6)\"}}\n                                                                        checked={!q.answer && q.answer!==null}\n                                                                        disabled={!this.state.productAssemblyTest.find(r=>(r.inTesting == true && r.name == 'testRGBLed'))}\n                                                                        onChange={this.testerAnswerConfirmQuestion.bind(null, q, false)}\n                                                                    />\n                                                        </div>\n                                                </div>                                  \n                                            </MDBListGroupItem>           \n                                        )\n                                    } else {\n                                        return ( // this is img\n                                            <>\n                                                <MDBListGroupItem key={q.key} color=\"warning\">\n                                                    <strong>Q2: </strong>{q.question}<br/>\n                                                    <img src={q.imgUrl} alt=\"Cap Image\"></img><br />\n                                                    <div style={{display: \"flex\"}}>\n                                                        <div>\n                                                            Có: <input \n                                                            checked={q.answer}\n                                                            disabled={!this.state.productAssemblyTest.find(r=>(r.inTesting == true && r.name == 'confirmImageQuality'))}\n                                                            onChange={this.testerAnswerConfirmQuestion.bind(null, q, true)}\n                                                            type=\"checkbox\" style={{marginLeft:\"10px\",  transform : \"scale(1.6)\"}}/> \n                                                \n                                                            </div>\n                                                        <div style={{marginLeft: \"50px\"}}>\n                                                            Không: <input \n                                                                checked={!q.answer && q.answer!==null}\n                                                                disabled={!this.state.productAssemblyTest.find(r=>(r.inTesting == true && r.name == 'confirmImageQuality'))}\n                                                                onChange={this.testerAnswerConfirmQuestion.bind(null, q, false)}\n                                                                type=\"checkbox\" style={{marginLeft:\"10px\",  transform : \"scale(1.6)\"}} />\n                                                        </div>\n                                                    </div>\n                                                </MDBListGroupItem>                                                \n                                            </>\n                                        )\n                                    } \n                                })\n                            })()}\n                        </MDBListGroup>\n                </MDBCardBody>\n            </MDBCard>     \n        )\n    }\n\n    renderEfuseSetup = () => {\n        return (\n                <div>\n                    <h4>Efuse To Burn: </h4>\n                    Model: {this.state.efuseSetup.model} <br /> \n                    production_line: {this.state.efuseSetup.production_line} <br /> \n                    version_code: {this.state.efuseSetup.version_code}    <br />\n                </div>\n            )\n    }\n\n    renderLogDebug = () => {\n        return (\n            <MDBCard>\n                <MDBCardBody>\n                    <MDBCardTitle style={styleCardTittle}>\n                            Log Debug\n                    </MDBCardTitle>\n                    <SerialDisplay />\n                </MDBCardBody>\n            </MDBCard>\n        )\n    }\n\n    renderRunningActions = () => {\n        return (\n            <>Render Running Actions</>\n        )\n    }\n\n    setBeginTest = (sms) => {\n        this.setState(state=>{\n            state.manualTestingResult.data = null\n            state.automaticTestingResult.scenarioTestResults = null\n\n            let automaticTesting = state.automationTest.map(t=>{\n                t.inTesting = false\n                t.result = null\n                return t\n            });\n\n            let productAssemblyTest = state.productAssemblyTest.map(t=>{\n                t.restTestingTime = null\n                t.inTesting = false\n                t.extractedData = null\n                t.testingResult = null\n                return t\n            })\n\n            console.log(\"state.inTestingDeviceStatus: \", state.inTestingDeviceStatus)\n            state.inTestingDeviceStatus.serialPort = sms.testAtSerialPort\n            // if (sms.testAtSerialPort) {\n            //     console.log(\"test at serial port: \", sms.testAtSerialPort)\n            //     state.inTestingDeviceStatus.serialPort = sms.testAtSerialPort  \n            // }\n            state.inTestingDeviceStatus.serialPort = sms.testAtSerialPort        \n            state.inTestingDeviceStatus.macAddress = sms.macAddress      \n            state.inTestingDeviceStatus.deviceBroken = sms.deviceBroken\n            state.inTestingDeviceStatus.efuse = sms.efuse\n            state.inTestingDeviceStatus.batteryLevel = sms.batteryLevel\n\n            let confirmQuestions = state.confirmQuestions.map(q=>{\n                q.answer = null\n                if (q.questionType === 'img') {\n                    q.imgUrl = null\n                }\n                return q\n            })\n\n            return {\n                automationTest: automaticTesting,\n                inTestingDeviceStatus: state.inTestingDeviceStatus,\n                productAssemblyTest: productAssemblyTest,\n                deviceBroken: false,\n                confirmQuestions: confirmQuestions,\n                manualTestingResult: state.manualTestingResult,\n                automaticTestingResult: state.automaticTestingResult\n            }\n        })\n    }\n\n    componentDidMount() {\n        // pull down boot\n        axios.get(\"/api/getFactoryDefaultBoot\").then(data=>{\n            console.log(\"data: \", data)\n            this.setState(state=>{\n                let jsonData = data.data.data.data.trim()\n                state.theBoot = JSON.parse(jsonData)\n                state.bootName = JSON.parse(data.data.data.bootName)\n                let automaticTesting = state.theBoot.map(scenaroTest=>{\n                    return {\n                        name: scenaroTest.name,\n                        key: uuidv4(),\n                        inTesting: false,\n                        result: null\n                    }\n                })\n\n                return {\n                    theBoot: state.theBoot,\n                    automationTest: automaticTesting,\n                    bootName: state.bootName\n                }\n            })\n        });\n        \n        setTimeout(()=>{\n            // this.context.bootSocket.on('connect_error', ()=>{\n            //     console.log('disconnect to server')\n            //     this.addNotification('Connect To Server Status', 'disconnected', 'danger', '5000')\n            //     // refesh page\n            // })\n\n            this.context.bootSocket.on('disconnect', ()=>{\n                console.log('disconnect')\n                this.addNotification('Connect To Server Status', 'disconnected', 'danger', '20000')\n                // refesh page\n            })\n\n            this.context.bootSocket.on('reconnect_attempt', ()=>{\n                console.log('on socket reconnect_attempt')\n                this.addNotification('Connect To Server Status', 'try reconnect', 'danger', '20000')\n            })\n\n            this.context.bootSocket.on(\"getAutomaticTestingResult\", sms=>{\n                this.setState(state=>{  \n                    state.automaticTestingResult.scenarioTestResults = []\n    \n                    for(let i of sms.scenarioTestResult) {\n                        state.automaticTestingResult.scenarioTestResults.push({\n                            name: i.scenarioTestName,\n                            key: uuidv4(),\n                            result: i.result,\n                        });\n                    }\n                \n                    state.automaticTestingResult.bootName = sms.bootName\n                    state.automaticTestingResult.date = sms.date\n                    state.automaticTestingResult.isAutomaticTestingPass = sms.isAutomaticTestingPass    \n                    state.automaticTestingResult.macAddress = sms.macAddress\n                    state.automaticTestingResult.testingTime = sms.testingTime\n                    return {\n                        automaticTestingResult: state.automaticTestingResult,\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"getManualTestingResult\", sms=>{\n                // console.log(\"getManualTestingResult sms: \",sms)\n                this.setState(state=>{\n                    state.manualTestingResult.data = sms.data\n                    state.manualTestingResult.dayTest = sms.dayTest\n                    state.manualTestingResult.result = sms.result\n                    state.manualTestingResult.testingTime = sms.testingTime\n                    return {\n                        manualTestingResult: state.manualTestingResult\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"testingDevicesStack\", sms=>{\n                // console.log(\"testingDevicesStack sms: \",sms)\n                this.setState(state=>{\n                    console.log(\"testingDevicesStack: \", sms)\n                    let r = sms\n                    return {\n                        devicesTestingStack: r\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"efuseSetup\", sms=>{\n                console.log(\"get efuse config: \" ,sms)\n                this.setState(state=>{\n                    return {\n                        efuseSetup: sms\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"testingImageCreated\", sms=>{\n                // console.log(\"testingImageCreated sms: \",sms)\n                this.setState(state=>{\n                    let confirmQuestions = state.confirmQuestions.map(q=>{\n                        if(q.questionType === \"img\") {\n                            q.imgUrl = sms\n                        } \n                        return q\n                    })\n                    return {\n                        confirmQuestions: confirmQuestions\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"inTestingDeviceStatus\", sms=>{\n                console.log(\"inTestingDeviceStatus sms: \",sms)\n                if (sms.phaseTesting === \"begin\") {\n                    this.setBeginTest(sms);              \n                } else {\n                    this.setState(state=>{\n                        state.inTestingDeviceStatus.serialPort = sms.testAtSerialPort        \n                        state.inTestingDeviceStatus.macAddress = sms.macAddress      \n                        state.inTestingDeviceStatus.deviceBroken = sms.deviceBroken\n                        state.inTestingDeviceStatus.efuse = sms.efuse\n                        state.inTestingDeviceStatus.batteryLevel = sms.batteryLevel\n                        \n                        console.log(\"setted: state.inTestingDeviceStatus: \", state.inTestingDeviceStatus)\n                        return {\n                            inTestingDeviceStatus: state.inTestingDeviceStatus\n                        }\n                    })\n                }\n                \n                \n            });\n\n            this.context.bootSocket.on(\"automaticTestingResultAlert\", sms=>{\n                console.log(\"automaticTestingResultAlert: \", sms)\n                alert(sms)\n            })\n\n            this.context.bootSocket.on(\"manualTestingActionStatus\",sms=>{\n                // console.log(\"manualTestingActionStatus sms: \",sms)\n                let indexManualTestingAction = -1\n\n                for (let i in this.state.productAssemblyTest) {\n                    if (this.state.productAssemblyTest[i].key === sms.manualTestingAction.key){\n                        indexManualTestingAction = i    \n                        break\n                    }\n                }\n\n                if(indexManualTestingAction > -1) {\n                    this.setState(state=>{\n                        if (sms.status === \"begin\") {\n                            state.productAssemblyTest[indexManualTestingAction].inTesting = true \n                            return {\n                                productAssemblyTest: state.productAssemblyTest\n                            }\n                        } else if (sms.status ===  \"waitingForActionFromTester\") {\n                            state.productAssemblyTest[indexManualTestingAction].restTestingTime = sms.restTestingTime\n                            return {\n                              productAssemblyTest: state.productAssemblyTest \n                           } \n                        } else if (sms.status === \"end\") {\n                            state.productAssemblyTest[indexManualTestingAction].testingResult = sms.testingResult\n                            state.productAssemblyTest[indexManualTestingAction].inTesting = false\n                            return {\n                                productAssemblyTest: state.productAssemblyTest\n                            }\n                        }\n                    })\n                }\n            })\n\n            this.context.bootSocket.on(\"scenarioTestRunningStatus\", sms=>{\n                console.log(\"scenarioTestRunningStatus sms: \",sms)\n                this.setState(state=>{\n                    for (let i in state.automationTest) {\n                        if (state.automationTest[i].name === sms.scenarioTestName) {\n                            state.automationTest[i].inTesting = sms.inTesting\n                            state.automationTest[i].result = sms.result\n                            break\n                        } \n                    }\n\n                    return {\n                        automaticTesting: state.automaticTesting\n                    }\n                });\n            })\n\n            this.context.bootSocket.on(\"boxInfos\", sms=>{\n                console.log(\"boxInfos sms: \", sms)\n                this.setState(state=>{\n                    // for(let i in state.boxInfos) {\n                    //     if(state.boxInfos[i].infoName === sms.infoName) {\n                    //         state.boxInfos[i].extractedData =  sms.extractedData\n                    //         return {\n                    //             boxInfos: state.boxInfos\n                    //         }\n                    //     }\n                    // }\n\n                    return {\n                        boxInfos: sms\n                    }\n                })\n            });\n\n            this.context.bootSocket.on(\"shouldPreventTestManual\", sms=>{\n                this.setState(state=>{\n                    return {\n                        shouldPreventTestManual: sms\n                }})\n            })\n\n            this.context.bootSocket.on(\"deviceBroken\", sms=>{\n                console.log(\">>>>>>>>>>deviceBoken sms: \",sms)\n                this.setBeginTest(sms)\n                this.setState(state=>{\n                    state.inTestingDeviceStatus.serialPort = null\n                    state.inTestingDeviceStatus.deviceBroken = true\n                    state.inTestingDeviceStatus.batteryLevel = null\n                    state.inTestingDeviceStatus.efuse = null\n                    return {\n                        deviceBroken: true,\n                        inTestingDeviceStatus: state.inTestingDeviceStatus,\n                        boxInfos: {}\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"hardwareBusy\", hardwareBusy=>{\n                // console.log(\"hardwareBusy sms: \",hardwareBusy)\n                this.setState(state=>{\n                    return {\n                        hardwareBusy: hardwareBusy\n                    }\n                })\n            })\n\n            this.context.bootSocket.on(\"message\", ms=>{\n                this.addNotification(ms.title, ms.message, ms.type, ms.duration)\n            })\n\n\n            if (this.state.chooseModeTestingButton.automationTest) {\n                this.context.bootSocket.emit(\"setQctoolForProductionTestMode\", \"automaticTestMode\")\n            } else {\n                this.context.bootSocket.emit(\"setQctoolForProductionTestMode\", \"manualTestMode\")\n            }\n\n            this.context.bootSocket.emit(\"newQctoolGetEfuseConfig\", '')\n            console.log(\"emited get efuse config\")\n\n        }, 2000)\n        \n        // this.context.bootSocket.emit(\"requestGetlistFirmware\",\"\")\n        this.context.bootSocket.emit(\"qctoolFactoryrequestStatusDevice\", \"\")\n        this.context.bootSocket.emit(\"turnQctoolToPoductionMode\", \"\")\n    }\n\n    render () {\n        return (\n            <React.Fragment>  \n                <ReactNotification ref={this.notificationDOMRef} />\n                <MDBNavbar style={{backgroundColor:\"#fdd835\", display: \"flex\"}}>\n                    {this.renderInTestingDeviceStatus()}\n                    <MDBBtn\n                        // outline\n                        color=\"success\"\n                        onClick={()=>{\n                                if (this.state.inTestingDeviceStatus.macAddress) {\n                                    this.context.bootSocket.emit(\"printLabel\", {\n                                        macAddress: this.state.inTestingDeviceStatus.macAddress\n                                    })\n                                }\n                            }}\n                        >\n                                Print Label\n                        </MDBBtn>\n                        <MDBBtn\n                            style={{marginRight: \"150px\"}} \n                            color=\"success\"\n                            onClick={()=>{\n                                this.context.bootSocket.emit(\"runManualTest\", this.state.productAssemblyTest)\n                            }}\n                            disabled={this.state.hardwareBusy || !this.state.inTestingDeviceStatus.serialPort || this.state.shouldPreventTestManual.status}\n                        >   \n                            {(()=>{\n                                if(!this.state.inTestingDeviceStatus.serialPort) {\n                                    return <div>Finding Serial Port...</div>\n                                } else if (!this.state.hardwareBusy) {\n                                    return <div> Run Manual Test </div>\n                                } else if (this.state.hardwareBusy) {\n                                    return <div>Manual Test Running....</div>\n                                }\n                            })()}\n                        </MDBBtn>            \n                </MDBNavbar>\n                <MDBRow> \n                    {/* <MDBCol sm=\"4\"> {this.renderBoxInfos()} </MDBCol> */}\n                    <MDBCol style={{overflowY: \"scroll\", height: \"700px\"}} sm=\"4\"> {(()=>{\n                        if(this.state.automaticTestingResult.scenarioTestResults) {\n                            return this.renderAutomaticTestingResult()\n                        } else {\n                            return this.renderAutomaticTesting()\n                        }\n                    })()} </MDBCol>\n                    <MDBCol sm=\"4\"> {(()=>{\n                        if(this.state.manualTestingResult.data) {\n                            return this.renderManualTestingResult()\n                        } else {\n                            return this.renderManualTesting()\n                        }\n                    })()} \n                    </MDBCol>\n                    <MDBCol sm=\"4\"> \n                        {this.renderConfirmQuestions()} \n                        {this.renderLogDebug()} \n                    </MDBCol>\n                </MDBRow>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default QctoolFactory","import React, { useState, useEffect, useContext } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\n\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\n\n\nconst useStyles = makeStyles(theme=>({\n    appBar: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '102px',\n        widh: '100%',\n        backgroundColor: '#F6BC42',\n        color: '#000000',\n        fontFamily: 'Roboto',\n        fontSize: '35px',\n        lineWeigth: '41px',\n        fontWeight: \"bold\",\n        textAlign: 'center'\n    },\n\n    authenticateSetting: {\n        marginTop: \"39px\",\n        marginLeft:\"90px\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n\n    authenticateSettingButtonsGroup: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: \"14px\",\n        width: \"100%\"\n    },\n\n    endpointSetting: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: \"39px\"\n    },\n    \n    publishToTopicSetting: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    },\n\n    publishToTopic: {\n        marginTop: \"62px\",\n        marginLeft:\"90px\",\n        display: \"flex\",\n        flexDirection: \"column\"\n    },\n\n    publishToTopicTextField: {\n        width: \"100%\",\n        height: \"624px\",\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n        backgroundColor: \"#FFFFFF\",\n        marginTop: \"62px\"\n    },\n\n    subcribeToTopicSetting: {\n        marginTop: \"39px\"\n    },\n\n    subscribeToTopic: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        marginTop: \"62px\",\n        width: \"100%\"\n    },\n\n    subscribedDataTextField: {\n        width: \"100%\",\n        height: \"624px\",\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\",\n        backgroundColor: \"#FFFFFF\",\n        marginTop: \"62px\"\n    },\n\n    header: {\n        fontFamily: \"Roboto\",\n        fontStyle: \"normal\",\n        fontWeight: \"normal\",\n        fontSize: \"25px\",\n        lineHeight: \"29px\",\n        color: \"#333333\",\n        height: \"40px\"\n    },\n\n    normalButtonStyle: {\n        backgroundColor: \"#F6BC42\",\n        height: \"55px\",\n        width: \"187px\",\n        marginRight: \"67px\",\n        boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\"    \n    },\n\n    normalIcon: {\n        height: \"55px\",\n        width: \"55px\"\n    }\n}))\n\nconst buttonStyle = {\n    backgroundColor: \"#F6BC42\"   \n}\n\n\nconst TestMQTTProtocol = () => {\n    \n    \n    const classes = useStyles()\n    \n    const isAuthenticated = useState(false)\n\n    const isPublished = useState(false)\n\n    const isSubscribled = useState(false)\n\n    useEffect(()=>{\n        document.body.style = \"background: #E5E5E5\"\n        \n        return () => {\n\n        }\n    }, [])\n\n    const renderAppBar = () => {\n        return (\n            <AppBar position=\"static\" className={classes.appBar}>\n                TEST UPLOAD IMAGE WITH MQTT PROTOCOL\n            </AppBar>\n        )\n    }\n\n    const renderAuthenticatingStatus = () => (isAuthenticated \n                                                ? <SentimentVerySatisfiedIcon className={classes.normalIcon} />\n                                                : <SentimentVeryDissatisfiedIcon className={classes.normalIcon} />     \n                                            )\n\n    const renderPublishingToTopicStatus = () => (isPublished \n                                                    ? <SentimentVerySatisfiedIcon className={classes.normalIcon} />\n                                                    : <SentimentVeryDissatisfiedIcon className={classes.normalIcon} />\n                                                )\n\n    const renderSubscribingToTopicStatus = () => {\n\n    }\n\n    const renderAuthenticatingSetting = () => {\n        return (\n            <div className={classes.authenticateSetting}>\n                <Typography className={classes.header}>\n                    Plase Upload These Files For Authenticating\n                </Typography>\n                <div className={classes.authenticateSettingButtonsGroup}>\n                    <Button variant=\"contained\" className={classes.normalButtonStyle}>Upload File</Button>\n                    <Button variant=\"contained\" className={classes.normalButtonStyle}>Upload File</Button>\n                    <Button variant=\"contained\" className={classes.normalButtonStyle}>Upload File</Button>\n                    {renderAuthenticatingStatus()}\n                </div>\n            </div>\n        )\n        \n    }\n\n    const renderPublishingToTotic = () => {\n        return (\n            <div className={classes.publishToTopic}>\n                <div className={classes.publishToTopicSetting}>\n                    <TextField\n                            style={{\n                                width: \"100%\",\n                                background: \"#FFFFFF\",\n                                boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\" ,\n                                marginRight: \"67px\"   \n                            }}\n                            label=\"Public To Topic, default: asdasdasdadasda\"\n                            variant=\"outlined\"\n                    />\n                    <Button \n                        className={classes.normalButtonStyle}\n                        style={{marginRight: \"0px\"}}\n                    >   \n                        Published\n                    </Button>\n                </div>\n                <TextareaAutosize rows=\"20\" className={classes.publishToTopicTextField} />\n            </div>\n            \n        )\n    }\n\n    const renderEndpointSetting = () => {\n        return (\n            <div className={classes.endpointSetting}>\n                <Typography className={classes.header}>\n                    Endpoint Setting\n                </Typography>\n                \n                <div \n                    style={{\n                        display: \"flex\",\n                        marginTop: \"14px\",\n                        flexDirection: \"row\",\n                        width: \"100%\"\n                }}>\n                    <div style={{width:\"100%\",marginRight: \"41px\"}}>\n                        <TextField\n                            style={{\n                                width: \"100%\",\n                                background: \"#FFFFFF\",\n                                boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\" ,\n                                height: \"55px\",   \n                            }}\n                            fullWidth={false}\n                            label=\"Host Url\"\n                            variant=\"outlined\"\n                        />\n                    </div>\n                    <div style={{width:\"100%\",marginRight: \"41px\"}}>\n                        <TextField\n                            style={{\n                                width: \"100%\",\n                                background: \"#FFFFFF\",\n                                boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\" ,\n                                height: \"55px\"   \n                            }}\n                            fullWidth={false}\n                            label=\"Host Url\"\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n    const renderSubcribingToTopic = () => {\n        return (\n            <div className={classes.subscribeToTopic}>\n                <TextField\n                    style={{\n                                width: \"100%\",\n                                background: \"#FFFFFF\",\n                                boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.25)\" ,\n                                height: \"55px\"\n                            }}\n                            fullWidth={false}\n                            label=\"Subcribe To Topic......\"\n                            variant=\"outlined\"\n                        />\n                <TextareaAutosize rows=\"20\" className={classes.subscribedDataTextField} />\n            </div>\n        )\n    }\n    \n    return (\n        <div>\n            {renderAppBar()}\n            <Grid direction=\"row\" container>\n                <Grid item xs={6} direction=\"column\">\n                    {renderAuthenticatingSetting()}\n                    {renderPublishingToTotic()}\n                </Grid>\n                <Grid item xs={6} direction=\"column\" style={{paddingLeft: \"29px\"}}>\n                    {renderEndpointSetting()}\n                    {renderSubcribingToTopic()}\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default TestMQTTProtocol","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport io from \"socket.io-client\";\n\nimport MainApp from \"./views/MainApp\";\nimport SerialDisplay from \"./views/SerialDisplay\";\nimport Qctool from \"./views/Components/Qctool\"\n\nimport AutomaticTest from './views/AutomaticTest'\n\nimport QctoolFactory from \"./views/QctoolFactory\"\n\nimport TestMQTTProtocol from './views/TestMQTTProtocol'\n\n// import Dashboard from \"./views/examples/Dashboard\"\n\nimport {SocketIoContext} from \"./views/contextCreateBoot\"\nimport uuidv4 from \"./views/utility\"\n// import CreateBoot from \"views/CreateBoot\";\n// import SimpleModalWrapped from \"views/CreateBoot\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      serialData: '',\n      bootSocket: null\n    };\n    const BOOT_SOCKET_URL = \"bootSocket\";\n    this.bootSocket = io.connect(`/${BOOT_SOCKET_URL}`)\n    this.backupSerialData = ''\n  }\n\n  storeSerialData = data => {\n    let d = data  \n    this.setState(state=>{\n      let data = state.serialData + d;\n      // console.log(data)\n      return {\n        serialData: data\n      }\n    });\n  };\n\n  setBackupSerialData = (data) => {\n    this.setBackupSerialData = data\n  }\n\n  // shouldComponentUpdate(nexProp, nextState) {\n  //   return this.state.serialData === nextState.serialData \n  // }\n\n  componentDidMount = () => {\n    document.title = \"QC-TOOL\"\n  }\n\n  componentWillMount = () => {\n    // this.connectSocket();\n  }\n\n  connectSocket = () => {\n    const BOOT_SOCKET_URL = \"bootSocket\";\n    let bootSocket = io.connect(`/${BOOT_SOCKET_URL}`);\n\n    bootSocket.on(\"connect\", ms => {\n      console.log(\"serial component connected to socket\");\n    });\n\n    // bootSocket.on(\"serialData\", this.storeSerialData);\n    \n    // this.bootSocket = bootSocket\n    this.setState(state=>{\n      return {\n        bootSocket: bootSocket\n      }\n    })\n  \n  };\n\n  render() {\n    return (\n      <Router>\n        <SocketIoContext.Provider value={\n          { bootSocket: this.bootSocket,\n            serialData: this.state.serialData,\n            backupSerialData: this.backupSerialData,\n            setBackupSerialData: this.setBackupSerialData\n          }\n        }>\n        <>\n        <Route path=\"/\" exact component={MainApp}></Route>\n        <Route path=\"/manual-test\" component={QctoolFactory}></Route>\n        <Route path=\"/automatic-test\" component={AutomaticTest}></Route>\n        <Route path=\"/test-mqtt\" component={TestMQTTProtocol} />\n        {/* <Route path=\"/example\" component={Dashboard}></Route> */}\n        </>\n        </SocketIoContext.Provider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Router, Route, Switch } from \"react-router-dom\";\n// import \"assets/scss/material-kit-react.scss?v=1.4.0\";\nimport App from \"./App\"\n\nvar hist = createBrowserHistory();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}